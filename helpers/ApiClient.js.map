{"version":3,"sources":["../src/helpers/ApiClient.js"],"names":["apiClient","req","instance","create","baseURL","__SERVER__","apiHost","transformRequest","data","stringify","token","setJwtToken","newToken","interceptors","request","use","header","conf","headers","Cookie","authorization","reject","error","response"],"mappings":";;;;;;;;;;kBAIwBA,S;;AAJxB;;;;AACA;;;;AACA;;;;;;;;;;;;AAEe,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACrC;AACA;AACA;AACA,MAAMC,WAAW,gBAAMC,MAAN,CAAa;AAC1BC,aAASC,yBAAuB,iBAAOC,OAA9B,cAAgD,QAD/B;AAE1BC,sBAAkB,CAAC,UAAUC,IAAV,EAAgB;AAC/B,aAAO,aAAGC,SAAH,CAAaD,QAAQ,EAArB,CAAP;AACH,KAFiB;AAFQ,GAAb,CAAjB;AAMA,MAAIE,cAAJ;;AAEAR,WAASS,WAAT,GAAuB,oBAAY;AACjCD,YAAQE,QAAR;AACD,GAFD;;AAIAV,WAASW,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,gBAAQ;AACN,QAAIV,UAAJ,EAAgB;AACd,UAAIJ,IAAIe,MAAJ,CAAW,QAAX,CAAJ,EAA0B;AACxBC,aAAKC,OAAL,CAAaC,MAAb,GAAsBlB,IAAIe,MAAJ,CAAW,QAAX,CAAtB;AACD;AACD,UAAIf,IAAIe,MAAJ,CAAW,eAAX,CAAJ,EAAiC;AAC/BC,aAAKC,OAAL,CAAaE,aAAb,GAA6BnB,IAAIe,MAAJ,CAAW,eAAX,CAA7B;AACD;AACF;;AAED,QAAIN,KAAJ,EAAW;AACTO,WAAKC,OAAL,CAAaE,aAAb,GAA6BV,KAA7B;AACD;;AAED,WAAOO,IAAP;AACD,GAhBH,EAiBE;AAAA,WAAS,kBAAQI,MAAR,CAAeC,KAAf,CAAT;AAAA,GAjBF;;AAoBApB,WAASW,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CACE;AAAA,WAAYQ,SAASf,IAArB;AAAA,GADF,EAEE;AAAA,WAAS,kBAAQa,MAAR,CAAeC,MAAMC,QAAN,GAAiBD,MAAMC,QAAN,CAAef,IAAhC,GAAuCc,KAAtD,CAAT;AAAA,GAFF;;AAKA,SAAOpB,QAAP;AACD;;;;;;;;;;;;0BA1CuBF,S","file":"ApiClient.js","sourcesContent":["import axios from 'axios';\r\nimport config from '../config';\r\nimport qs from 'qs';\r\n\r\nexport default function apiClient(req) {\r\n  // const instance = axios.create({\r\n  //   baseURL: __SERVER__ ? `http://${config.apiHost}:${config.apiPort}` : '/proxy'\r\n  // });\r\n  const instance = axios.create({\r\n      baseURL: __SERVER__ ? `http://${config.apiHost}/proxy` : '/proxy',\r\n      transformRequest: [function (data) {\r\n          return qs.stringify(data || {});\r\n      }],\r\n  });\r\n  let token;\r\n\r\n  instance.setJwtToken = newToken => {\r\n    token = newToken;\r\n  };\r\n\r\n  instance.interceptors.request.use(\r\n    conf => {\r\n      if (__SERVER__) {\r\n        if (req.header('cookie')) {\r\n          conf.headers.Cookie = req.header('cookie');\r\n        }\r\n        if (req.header('authorization')) {\r\n          conf.headers.authorization = req.header('authorization');\r\n        }\r\n      }\r\n\r\n      if (token) {\r\n        conf.headers.authorization = token;\r\n      }\r\n\r\n      return conf;\r\n    },\r\n    error => Promise.reject(error)\r\n  );\r\n\r\n  instance.interceptors.response.use(\r\n    response => response.data,\r\n    error => Promise.reject(error.response ? error.response.data : error)\r\n  );\r\n\r\n  return instance;\r\n}"]}