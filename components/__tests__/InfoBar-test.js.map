{"version":3,"sources":["../../src/components/__tests__/InfoBar-test.js"],"names":["client","ApiClient","describe","mockStore","info","load","loaded","loading","data","message","time","Date","now","store","browserHistory","renderer","dom","ReactDOM","findDOMNode","it","to","be","ok","text","getElementsByTagName","textContent","equal","a","styles","require","infoBar","className","include"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;AACA,IAAMA,SAAS,IAAIC,mBAAJ,EAAf;;AAEAC,SAAS,SAAT,EAAoB,YAAM;AACxB,MAAMC,YAAY;AAChBC,UAAM;AACJC,YAAM,gBAAM,CAAE,CADV;AAEJC,cAAQ,IAFJ;AAGJC,eAAS,KAHL;AAIJC,YAAM;AACJC,iBAAS,+BADL;AAEJC,cAAMC,KAAKC,GAAL;AAFF;AAJF;AADU,GAAlB;AAWA,MAAMC,QAAQ,sBAAYC,2BAAZ,EAA4Bd,MAA5B,EAAoCG,SAApC,CAAd;AACA,MAAMY,WAAW,8CACf;AAAC,wBAAD;AAAA,MAAU,OAAOF,KAAjB,EAAwB,KAAI,UAA5B;AACE,kCAAC,mBAAD;AADF,GADe,CAAjB;AAKA,MAAMG,MAAMC,mBAASC,WAAT,CAAqBH,QAArB,CAAZ;;AAEAI,KAAG,yBAAH,EAA8B,YAAM;AAClC,WAAO,kBAAOJ,QAAP,EAAiBK,EAAjB,CAAoBC,EAApB,CAAuBC,EAA9B;AACD,GAFD;;AAIAH,KAAG,kCAAH,EAAuC,YAAM;AAC3C,QAAMI,OAAOP,IAAIQ,oBAAJ,CAAyB,QAAzB,EAAmC,CAAnC,EAAsCC,WAAnD;AACA,sBAAOF,IAAP,EAAaH,EAAb,CAAgBM,KAAhB,CAAsBvB,UAAUC,IAAV,CAAeI,IAAf,CAAoBC,OAA1C;AACD,GAHD;;AAKAU,KAAG,oCAAH,EAAyC,YAAM;AAC7C,QAAMI,OAAOP,IAAIQ,oBAAJ,CAAyB,QAAzB,EAAmC,CAAnC,EAAsCC,WAAnD;AACA,sBAAOF,IAAP,EAAaH,EAAb,CAAgBC,EAAhB,CAAmBM,CAAnB,CAAqB,QAArB;AACD,GAHD;;AAKAR,KAAG,qCAAH,EAA0C,YAAM;AAC9C,QAAMS,SAASC,QAAQ,iCAAR,CAAf;AACA,sBAAOD,OAAOE,OAAd,EAAuBV,EAAvB,CAA0BC,EAA1B,CAA6BM,CAA7B,CAA+B,QAA/B;AACA,sBAAOX,IAAIe,SAAX,EAAsBX,EAAtB,CAAyBY,OAAzB,CAAiCJ,OAAOE,OAAxC;AACD,GAJD;AAKD,CAvCD","file":"InfoBar-test.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {renderIntoDocument} from 'react-addons-test-utils';\r\nimport { expect} from 'chai';\r\nimport { InfoBar } from 'components';\r\nimport { Provider } from 'react-redux';\r\nimport { browserHistory } from 'react-router';\r\nimport createStore from 'redux/create';\r\nimport ApiClient from 'helpers/ApiClient';\r\nconst client = new ApiClient();\r\n\r\ndescribe('InfoBar', () => {\r\n  const mockStore = {\r\n    info: {\r\n      load: () => {},\r\n      loaded: true,\r\n      loading: false,\r\n      data: {\r\n        message: 'This came from the api server',\r\n        time: Date.now()\r\n      }\r\n    }\r\n  };\r\n  const store = createStore(browserHistory, client, mockStore);\r\n  const renderer = renderIntoDocument(\r\n    <Provider store={store} key=\"provider\">\r\n      <InfoBar/>\r\n    </Provider>\r\n  );\r\n  const dom = ReactDOM.findDOMNode(renderer);\r\n\r\n  it('should render correctly', () => {\r\n    return expect(renderer).to.be.ok;\r\n  });\r\n\r\n  it('should render with correct value', () => {\r\n    const text = dom.getElementsByTagName('strong')[0].textContent;\r\n    expect(text).to.equal(mockStore.info.data.message);\r\n  });\r\n\r\n  it('should render with a reload button', () => {\r\n    const text = dom.getElementsByTagName('button')[0].textContent;\r\n    expect(text).to.be.a('string');\r\n  });\r\n\r\n  it('should render the correct className', () => {\r\n    const styles = require('components/InfoBar/InfoBar.scss');\r\n    expect(styles.infoBar).to.be.a('string');\r\n    expect(dom.className).to.include(styles.infoBar);\r\n  });\r\n});\r\n"]}