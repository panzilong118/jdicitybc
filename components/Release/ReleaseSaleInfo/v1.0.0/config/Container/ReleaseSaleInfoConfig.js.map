{"version":3,"sources":["../../../../../../src/components/Release/ReleaseSaleInfo/v1.0.0/config/Container/ReleaseSaleInfoConfig.js"],"names":["FormItem","Item","ev","ReleaseSaleInfoConfig","components","state","centerConfig","saveConfig","searchConfig","create","AppConfigHoc","props","context","examineExtendColumnFields","extendColumnFields","labelArr","ifEmpty","forEach","item","label","length","labelName","push","newLabelSet","ifRepeat","size","handleSubmit","form","validateFields","err","values","examin","error","setState","loading","that","saveConfigHoc","componentId","pageId","config","then","result","callParent","success","onCheckboxChange","e","field","setFieldsValue","target","checked","spinLoading","event","origin","indexOf","source","postMessage","window","addEventListener","receiveMessage","queryString","parse","location","search","href","split","searchConfigHoc","forceUpdate","console","log","testPropsFromHoc","getFieldDecorator","getFieldValue","formItemLayout","labelCol","span","wrapperCol","formItemLayout_full","extendTitle","extendFormItemLabel","width","overflow","margin","valuePropName","initialValue","modelCode","productCode","barCode","skuUnit","Component","contextTypes","store","PropTypes","object"],"mappings":"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","file":"ReleaseSaleInfoConfig.js","sourcesContent":["/**\r\n * @author chenyanhua\r\n * @date 2018-08-03\r\n * @file 销售信息表格：自定义扩展列\r\n * /item-shop-view/configs/components-react/ReleaseSaleInfo/v1.0.0\r\n */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { saveConfig, searchConfig } from './redux';\r\nimport queryString from 'query-string';\r\nimport { Row, Col, Checkbox, Form, Button, message, Spin, Icon, Tooltip  } from 'jdcloudui';\r\nimport PropTypes from 'prop-types';\r\nimport ExtendFieldsFormItem from './ExtendFieldsFormItem';\r\nconst FormItem = Form.Item;\r\nimport AppConfigHoc from '../../../../AppConfig/AppConfigHoc';\r\n\r\nimport './style.css';\r\nlet ev;\r\n@connect(state => ({ components: state.centerConfig }), { saveConfig, searchConfig })\r\n@AppConfigHoc\r\n@Form.create()\r\nexport default class ReleaseSaleInfoConfig extends Component {\r\n    static contextTypes = {\r\n        store: PropTypes.object\r\n    }\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.componentId = '';\r\n        this.pageId = '';\r\n        this.state = { loading: false, spinLoading: true };\r\n\r\n    }\r\n\r\n    /**\r\n     * 扩展列不能为空，且扩展的列字段不能重复；\r\n     */\r\n    examineExtendColumnFields = (extendColumnFields) => {\r\n        let labelArr = []; // 记录所有的label\r\n        let ifEmpty = false; //是否存在为空字段\r\n        extendColumnFields.forEach((item) => {\r\n            if (item.label.length <= 0 || item.labelName.length <= 0) {\r\n                ifEmpty = true;\r\n                return;\r\n            }\r\n            labelArr.push(item.label);\r\n        });\r\n        const newLabelSet = new Set(labelArr);\r\n        return {\r\n            ifEmpty: ifEmpty, // 是否有为空字段\r\n            ifRepeat: labelArr.length == newLabelSet.size ? false : true // label字段是否重复，true为重复，false不重复\r\n        }\r\n    }\r\n    handleSubmit = () => {\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                let examin = {};\r\n\r\n                // 如果扩展列有数据，则先进行校验\r\n                if (values.extendColumnFields && values.extendColumnFields.length > 0) {\r\n                    examin = this.examineExtendColumnFields(values.extendColumnFields);\r\n                }\r\n                if (examin.ifEmpty) {\r\n                    message.error(\"扩展列数据不能为空，请输入！\");\r\n                    return;\r\n                } else if (examin.ifRepeat) {\r\n                    message.error(\"列字段不能重复，请重新输入！\");\r\n                    return;\r\n                } else {\r\n                    this.setState({ loading: true });\r\n                    var that = this;\r\n                    this.props.saveConfigHoc({ componentId: this.componentId, pageId: this.pageId, config: JSON.stringify(values) }).then(\r\n                        (result) => {\r\n                            that.callParent();\r\n                            message.success('修改成功', 2);\r\n                            that.setState({ loading: false });\r\n                        },\r\n                        (error) => {\r\n                            message.error(error, 2);\r\n                            that.setState({ loading: false });\r\n\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    receiveMessage(event) {\r\n        if(event && event.origin.indexOf('platform')>=0){\r\n            ev = event;\r\n        }\r\n    }\r\n\r\n    callParent() {\r\n        ev && ev.source && ev.source.postMessage && ev.source.postMessage('ok', ev.origin);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('message', this.receiveMessage, false);\r\n        const componentId = queryString.parse(window.location.search).componentId;\r\n        const pageId = queryString.parse(window.location.search).pageId;\r\n        let source = window.location.href.split('/');\r\n        let length = source.length;\r\n        /*        this.componentId = source[length-2];\r\n                this.pageId = source[length-1];*/\r\n        this.componentId = componentId;\r\n        this.pageId = pageId;\r\n        this.props.searchConfigHoc({ componentId: this.componentId, pageId: this.pageId }).then(\r\n            (result) => {\r\n                this.setState({ ...result, spinLoading: false })\r\n                this.forceUpdate();\r\n            },\r\n            (error) => {\r\n                message.error(error, 2);\r\n                this.setState({ spinLoading: false })\r\n            }\r\n        );\r\n        console.log('componentId----', this.componentId)\r\n        console.log('pageId-----', this.pageId)\r\n    }\r\n\r\n    render() {\r\n        console.log('this.props.testPropsFromHoc is:', this.props.testPropsFromHoc);\r\n        console.log('this.props.saveConfigHoc is:', this.props.saveConfigHoc);\r\n        const { getFieldDecorator, getFieldValue, setFieldsValue } = this.props.form;\r\n        const formItemLayout = { labelCol: { span: 18 }, wrapperCol: { span: 6 } };\r\n        const formItemLayout_full = { labelCol: { span: 3 }, wrapperCol: { span: 21 } };\r\n        const extendTitle = <div>\r\n                                列字段：唯一，数据库中存储使用，如果改变，则成为新列。<br />\r\n                                列名称：展示给用户的列名称。\r\n                            </div>;\r\n        const extendFormItemLabel = <Tooltip title={extendTitle}>\r\n                                        扩展列 <Icon type=\"question-circle-o\" />\r\n                                    </Tooltip>;\r\n        return (\r\n            <Spin spinning={this.state.spinLoading}>\r\n                <div style={{ width: '600px', overflow:'auto', margin: 'auto' }}>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col span={4}>\r\n                                <FormItem label=\"型号\" {...formItemLayout}>\r\n                                    {getFieldDecorator('modelCode', {\r\n                                        valuePropName: 'checked',\r\n                                        initialValue: this.state.modelCode\r\n                                    })(\r\n                                        <Checkbox />\r\n                                    )}\r\n                                </FormItem>\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                <FormItem label=\"物料号\" {...formItemLayout}>\r\n                                    {getFieldDecorator('productCode', {\r\n                                        valuePropName: 'checked',\r\n                                        initialValue: this.state.productCode\r\n                                    })(\r\n                                        <Checkbox />\r\n                                    )}\r\n                                </FormItem>\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                <FormItem label=\"商品条码\" {...formItemLayout}>\r\n                                    {getFieldDecorator('barCode', {\r\n                                        valuePropName: 'checked',\r\n                                        initialValue: this.state.barCode\r\n                                    })(\r\n                                        <Checkbox />\r\n                                    )}\r\n                                </FormItem>\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                <FormItem label=\"单位\" {...formItemLayout}>\r\n                                    {getFieldDecorator('skuUnit', {\r\n                                        valuePropName: 'checked',\r\n                                        initialValue: this.state.skuUnit\r\n                                    })(\r\n                                        <Checkbox />\r\n                                    )}\r\n                                </FormItem>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                                <FormItem label={extendFormItemLabel} {...formItemLayout_full}>\r\n                                    {getFieldDecorator('extendColumnFields', {\r\n                                        initialValue: this.state.extendColumnFields\r\n                                    })(\r\n                                        <ExtendFieldsFormItem\r\n                                            setFieldsValue={setFieldsValue}\r\n                                            getFieldValue={getFieldValue}\r\n                                        />\r\n                                    )}\r\n                                </FormItem>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    <div className=\"buttonFooter\">\r\n                        <Button type=\"primary\" onClick={() => this.handleSubmit()} loading={this.state.loading}>保存</Button>\r\n                        <Button className=\"ml15\" onClick={() => this.callParent()}>取消</Button>\r\n                    </div>\r\n                </div>\r\n            </Spin>\r\n        );\r\n    }\r\n    /**\r\n     * @param e checkbox 对象\r\n     * @param field 修改的字段\r\n     */\r\n    onCheckboxChange = (e, field) => {\r\n        this.props.form.setFieldsValue({\r\n            [field]: e.target.checked\r\n        });\r\n    }\r\n}\r\n"]}