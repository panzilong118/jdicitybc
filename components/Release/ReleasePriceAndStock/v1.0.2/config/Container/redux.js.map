{"version":3,"sources":["../../../../../../src/components/Release/ReleasePriceAndStock/v1.0.2/config/Container/redux.js"],"names":["state","loaded","action","type","LOAD_SUCCESS","components","result","data","loading","LOAD_FAIL","error","SEARCH_SUCCESS","searchData","search_loading","search_loaded","SEARCH_FAIL","search_error","saveConfig","searchConfig","LOAD","SEARCH","values","types","promise","client","get","params","then","ret","config","JSON","parse"],"mappings":";;;;;;;;;;kBAae,YAA8C;AAAA,QAArCA,KAAqC,uEAA7B,EAACC,QAAO,KAAR,EAA6B;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AACzD,YAAQA,OAAOC,IAAf;AACI;;;;;AAKA,aAAKC,YAAL;AACI,8CACOJ,KADP;AAEIK,uDAAeH,OAAOI,MAAP,CAAcC,IAA7B,CAFJ;AAGIC,yBAAS,KAHb;AAIIP,wBAAQ;AAJZ;AAMJ,aAAKQ,SAAL;AACI,8CACOT,KADP;AAEIQ,yBAAS,KAFb;AAGIP,wBAAQ,KAHZ;AAIIS,uBAAOR,OAAOQ;AAJlB;AAMJ,aAAKC,cAAL;AACI,8CACOX,KADP;AAEIY,uDAAeV,OAAOI,MAAP,CAAcC,IAA7B,CAFJ;AAGIM,gCAAgB,KAHpB;AAIIC,+BAAe;AAJnB;AAMJ,aAAKC,WAAL;AACI,8CACOf,KADP;AAEIa,gCAAgB,KAFpB;AAGIC,+BAAe,KAHnB;AAIIE,8BAAcd,OAAOQ;AAJzB;AAMJ;AACI,mBAAOV,KAAP;AAnCR;AAqCH,C;;QAEeiB,U,GAAAA,U;QAOAC,Y,GAAAA,Y;;;;AA5DhB;;;AAGA,IAAMC,OAAO,oCAAb;AACA,IAAMf,eAAe,4CAArB;AACA,IAAMK,YAAY,yCAAlB;;AAGA,IAAMW,SAAS,oCAAf;AACA,IAAMT,iBAAiB,4CAAvB;AACA,IAAMI,cAAc,yCAApB;;AA2CO,SAASE,UAAT,CAAoBI,MAApB,EAA4B;AAC/B,WAAO;AACHC,eAAO,CAACH,IAAD,EAAOf,YAAP,EAAqBK,SAArB,CADJ;AAEHc,iBAAS,iBAAEC,MAAF;AAAA,mBAAcA,OAAOC,GAAP,CAAW,wDAAX,EAAoE,EAACC,QAAOL,MAAR,EAApE,EAAqFM,IAArF,CAA0F,UAACC,GAAD,EAAO;AAAC,uBAAOA,OAAOA,IAAIrB,IAAlB;AAAuB,aAAzH,CAAd;AAAA;AAFN,KAAP;AAIH;;AAEM,SAASW,YAAT,CAAsBG,MAAtB,EAA8B;AACjC,WAAO;AACHC,eAAO,CAACH,IAAD,EAAOf,YAAP,EAAqBK,SAArB,CADJ;AAEHc,iBAAS,iBAAEC,MAAF;AAAA,mBAAcA,OAAOC,GAAP,CAAW,+DAAX,EAA2E,EAACC,QAAOL,MAAR,EAA3E,EAA4FM,IAA5F,CAAiG,UAACC,GAAD,EAAO;AAAC,uBAAOA,OAAOA,IAAIrB,IAAX,IAAmBqB,IAAIrB,IAAJ,CAASsB,MAA5B,IAAqCC,KAAKC,KAAL,CAAWH,IAAIrB,IAAJ,CAASsB,MAApB,CAA5C;AAAwE,aAAjL,CAAd;AAAA;AAFN,KAAP;AAIH","file":"redux.js","sourcesContent":["/**\r\n * Created by huangxiao3 on 2018/5/28.\r\n */\r\nconst LOAD = 'dynamic-load-component/center/LOAD';\r\nconst LOAD_SUCCESS = 'dynamic-load-component/center/LOAD_SUCCESS';\r\nconst LOAD_FAIL = 'dynamic-load-component/center/LOAD_FAIL';\r\n\r\n\r\nconst SEARCH = 'dynamic-load-component/SEARCH/LOAD';\r\nconst SEARCH_SUCCESS = 'dynamic-load-component/SEARCH/LOAD_SUCCESS';\r\nconst SEARCH_FAIL = 'dynamic-load-component/SEARCH/LOAD_FAIL';\r\n\r\n\r\nexport default function(state = {loaded:false}, action = {}) {\r\n    switch (action.type) {\r\n        /*    case LOAD:\r\n         return {\r\n         ...state,\r\n         loading: true\r\n         };*/\r\n        case LOAD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                components:{...action.result.data},\r\n                loading: false,\r\n                loaded: true\r\n            };\r\n        case LOAD_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded: false,\r\n                error: action.error\r\n            };\r\n        case SEARCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                searchData:{...action.result.data},\r\n                search_loading: false,\r\n                search_loaded: true\r\n            };\r\n        case SEARCH_FAIL:\r\n            return {\r\n                ...state,\r\n                search_loading: false,\r\n                search_loaded: false,\r\n                search_error: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function saveConfig(values) {\r\n    return {\r\n        types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],\r\n        promise: ( client ) => client.get('/module-manage-service/operating/modules/componentConf',{params:values}).then((ret)=>{return ret && ret.data})\r\n    };\r\n}\r\n\r\nexport function searchConfig(values) {\r\n    return {\r\n        types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],\r\n        promise: ( client ) => client.get('/module-manage-service/operating/modules/queryComponentConfig',{params:values}).then((ret)=>{return ret && ret.data && ret.data.config &&JSON.parse(ret.data.config)})\r\n    };\r\n}\r\n\r\n"]}