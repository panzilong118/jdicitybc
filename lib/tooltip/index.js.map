{"version":3,"sources":["../../components/tooltip/index.js"],"names":["React","splitObject","obj","keys","picked","omitted","forEach","key","Tooltip","props","onVisibleChange","visible","setState","isNoTitle","onPopupAlign","domNode","align","placements","getPlacements","placement","Object","filter","points","rect","getBoundingClientRect","transformOrigin","top","left","indexOf","height","offset","width","style","saveTooltip","node","tooltip","state","defaultVisible","nextProps","getPopupDomNode","builtinPlacements","arrowPointAtCenter","autoAdjustOverflow","verticalArrowShift","trigger","Array","isArray","element","type","__JC_BUTTON","disabled","isHoverTrigger","spanStyle","display","cursor","buttonStyle","pointerEvents","child","className","title","overlay","prefixCls","openClassName","getPopupContainer","getTooltipContainer","children","getDisabledCompatibleChildren","isValidElement","childProps","childCls","Component","defaultProps","transitionName","mouseEnterDelay","mouseLeaveDelay"],"mappings":"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","file":"index.js","sourcesContent":["import * as React from 'react';\nimport { cloneElement } from 'react';\nimport RcTooltip from 'rc-tooltip';\nimport classNames from 'classnames';\nimport getPlacements from './placements';\n// eslint校验变量未使用，暂时注释掉\n// import Button from '../button/index';\n\nconst splitObject = (obj, keys) => {\n    const picked = {};\n    const omitted = { ...obj };\n    keys.forEach((key) => {\n        if (obj && key in obj) {\n            picked[key] = obj[key];\n            delete omitted[key];\n        }\n    });\n    return { picked, omitted };\n};\n\nexport default class Tooltip extends React.Component {\n    static defaultProps = {\n        prefixCls: 'jc-tooltip',\n        placement: 'top',\n        transitionName: 'zoom-big-fast',\n        mouseEnterDelay: 0.1,\n        mouseLeaveDelay: 0.1,\n        arrowPointAtCenter: false,\n        autoAdjustOverflow: true,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: !!props.visible || !!props.defaultVisible,\n        };\n        this.tooltip = {};\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if ('visible' in nextProps) {\n            this.setState({ visible: nextProps.visible });\n        }\n    }\n\n    onVisibleChange = (visible) => {\n        const { onVisibleChange } = this.props;\n        if (!('visible' in this.props)) {\n            this.setState({ visible: this.isNoTitle() ? false : visible });\n        }\n        if (onVisibleChange && !this.isNoTitle()) {\n            onVisibleChange(visible);\n        }\n    }\n\n    getPopupDomNode() {\n        return this.tooltip.getPopupDomNode();\n    }\n\n    getPlacements() {\n        const { builtinPlacements, arrowPointAtCenter, autoAdjustOverflow } = this.props;\n        return builtinPlacements || getPlacements({\n            arrowPointAtCenter,\n            verticalArrowShift: 8,\n            autoAdjustOverflow,\n        });\n    }\n\n    isHoverTrigger() {\n        const { trigger } = this.props;\n        if (!trigger || trigger === 'hover') {\n            return true;\n        }\n        if (Array.isArray(trigger)) {\n            return trigger.indexOf('hover') >= 0;\n        }\n        return false;\n    }\n\n    // Fix Tooltip won't hide at disabled button\n    // mouse events don't trigger at disabled button in Chrome\n    // https://github.com/react-component/tooltip/issues/18\n    getDisabledCompatibleChildren(element) {\n        if ((element.type.__JC_BUTTON || element.type === 'button') &&\n            element.props.disabled && this.isHoverTrigger()) {\n            // Pick some layout related style properties up to span\n            // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254\n            const { picked, omitted } = splitObject(\n                element.props.style,\n                ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex'],\n            );\n            const spanStyle = {\n                display: 'inline-block', // default inline-block is important\n                ...picked,\n                cursor: 'not-allowed',\n            };\n            const buttonStyle = {\n                ...omitted,\n                pointerEvents: 'none',\n            };\n            const child = cloneElement(element, {\n                style: buttonStyle,\n                className: null,\n            });\n            return (\n                <span style={spanStyle} className={element.props.className}>\n                    {child}\n                </span>\n            );\n        }\n        return element;\n    }\n\n    isNoTitle() {\n        const { title, overlay } = this.props;\n        return !title && !overlay; // overlay for old version compatibility\n    }\n\n    // 动态设置动画点\n    onPopupAlign = (domNode, align) => {\n        const placements = this.getPlacements();\n        // 当前返回的位置\n        const placement = Object.keys(placements).filter(key => (placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1]))[0];\n        if (!placement) {\n            return;\n        }\n        // 根据当前坐标设置动画点\n        const rect = domNode.getBoundingClientRect();\n        const transformOrigin = {\n            top: '50%',\n            left: '50%',\n        };\n        if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {\n            transformOrigin.top = `${rect.height - align.offset[1]}px`;\n        } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {\n            transformOrigin.top = `${-align.offset[1]}px`;\n        }\n        if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {\n            transformOrigin.left = `${rect.width - align.offset[0]}px`;\n        } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {\n            transformOrigin.left = `${-align.offset[0]}px`;\n        }\n        domNode.style.transformOrigin = `${transformOrigin.left} ${transformOrigin.top}`;\n    }\n\n    saveTooltip = (node) => {\n        this.tooltip = node;\n    }\n\n    render() {\n        const { props, state } = this;\n        const { prefixCls, title, overlay, openClassName, getPopupContainer, getTooltipContainer } = props;\n        const children = props.children;\n        let visible = state.visible;\n        // Hide tooltip when there is no title\n        if (!('visible' in props) && this.isNoTitle()) {\n            visible = false;\n        }\n\n        const child = this.getDisabledCompatibleChildren(React.isValidElement(children) ? children : <span>{children}</span>);\n        const childProps = child.props;\n        const childCls = classNames(childProps.className, {\n            [openClassName || `${prefixCls}-open`]: true,\n        });\n\n        return (\n            <RcTooltip\n                {...this.props}\n                getTooltipContainer={getPopupContainer || getTooltipContainer}\n                ref={this.saveTooltip}\n                builtinPlacements={this.getPlacements()}\n                overlay={overlay || title || ''}\n                visible={visible}\n                onVisibleChange={this.onVisibleChange}\n                onPopupAlign={this.onPopupAlign}\n            >\n                {visible ? cloneElement(child, { className: childCls }) : child}\n            </RcTooltip>\n        );\n    }\n}\n"]}