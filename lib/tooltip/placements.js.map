{"version":3,"sources":["../../components/tooltip/placements.js"],"names":["getOverflowOptions","getPlacements","autoAdjustOverflowEnabled","adjustX","adjustY","autoAdjustOverflowDisabled","targetOffset","autoAdjustOverflow","config","arrowWidth","horizontalArrowShift","verticalArrowShift","placementMap","left","points","offset","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","Object","keys","forEach","key","arrowPointAtCenter","overflow"],"mappings":"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","file":"placements.js","sourcesContent":["import { placements as rcPlacements } from 'rc-tooltip/lib/placements';\n\nconst autoAdjustOverflowEnabled = {\n    adjustX: 1,\n    adjustY: 1,\n};\n\nconst autoAdjustOverflowDisabled = {\n    adjustX: 0,\n    adjustY: 0,\n};\n\nconst targetOffset = [0, 0];\n\nexport function getOverflowOptions(autoAdjustOverflow) {\n    if (typeof autoAdjustOverflow === 'boolean') {\n        return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n    }\n    return {\n        ...autoAdjustOverflowDisabled,\n        ...autoAdjustOverflow,\n    };\n}\n\nexport default function getPlacements(config = {}) {\n    const { arrowWidth = 5, horizontalArrowShift = 16, verticalArrowShift = 12, autoAdjustOverflow = true } = config;\n    const placementMap = {\n        left: {\n            points: ['cr', 'cl'],\n            offset: [-4, 0],\n        },\n        right: {\n            points: ['cl', 'cr'],\n            offset: [4, 0],\n        },\n        top: {\n            points: ['bc', 'tc'],\n            offset: [0, -4],\n        },\n        bottom: {\n            points: ['tc', 'bc'],\n            offset: [0, 4],\n        },\n        topLeft: {\n            points: ['bl', 'tc'],\n            offset: [-(horizontalArrowShift + arrowWidth), -4],\n        },\n        leftTop: {\n            points: ['tr', 'cl'],\n            offset: [-4, -(verticalArrowShift + arrowWidth)],\n        },\n        topRight: {\n            points: ['br', 'tc'],\n            offset: [horizontalArrowShift + arrowWidth, -4],\n        },\n        rightTop: {\n            points: ['tl', 'cr'],\n            offset: [4, -(verticalArrowShift + arrowWidth)],\n        },\n        bottomRight: {\n            points: ['tr', 'bc'],\n            offset: [horizontalArrowShift + arrowWidth, 4],\n        },\n        rightBottom: {\n            points: ['bl', 'cr'],\n            offset: [4, verticalArrowShift + arrowWidth],\n        },\n        bottomLeft: {\n            points: ['tl', 'bc'],\n            offset: [-(horizontalArrowShift + arrowWidth), 4],\n        },\n        leftBottom: {\n            points: ['br', 'cl'],\n            offset: [-4, verticalArrowShift + arrowWidth],\n        },\n    };\n    Object.keys(placementMap).forEach((key) => {\n        placementMap[key] = config.arrowPointAtCenter ? {\n            ...placementMap[key],\n            overflow: getOverflowOptions(autoAdjustOverflow),\n            targetOffset,\n        } : {\n            ...rcPlacements[key],\n            overflow: getOverflowOptions(autoAdjustOverflow),\n        };\n    });\n    return placementMap;\n}\n"]}