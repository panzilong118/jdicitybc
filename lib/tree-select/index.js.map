{"version":3,"sources":["../../components/tree-select/index.js"],"names":["React","TreeSelect","props","saveTreeSelect","node","rcTreeSelect","renderTreeSelect","locale","prefixCls","className","size","notFoundContent","dropdownStyle","dropdownClassName","restProps","cls","checkable","treeCheckable","maxHeight","overflow","multiple","focus","blur","Component","TreeNode","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","defaultProps","transitionName","choiceTransitionName","showSearch","propTypes","key","string","value","bool","searchPlaceholder","dropdownMatchSelectWidth","treeDefaultExpandAll","treeNodeFilterProp","treeNodeLabelProp","treeDataSimpleMode","oneOfType","Object","showCheckedStrategy","oneOf","labelInValue","treeCheckStrictly"],"mappings":";;;;;;;;;;;AAAA;;IAAYA,K;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;IAEqBC,U;;;AAanB;;AAEA,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACXA,KADW;;AAAA,UAiBnBC,cAjBmB,GAiBF,UAACC,IAAD,EAAU;AACzB,YAAKC,YAAL,GAAoBD,IAApB;AACD,KAnBkB;;AAAA,UAqBnBE,gBArBmB,GAqBA,UAACC,MAAD,EAAY;AAAA;;AAAA,wBASzB,MAAKL,KAToB;AAAA,UAE3BM,SAF2B,eAE3BA,SAF2B;AAAA,UAG3BC,SAH2B,eAG3BA,SAH2B;AAAA,UAI3BC,IAJ2B,eAI3BA,IAJ2B;AAAA,UAK3BC,eAL2B,eAK3BA,eAL2B;AAAA,UAM3BC,aAN2B,eAM3BA,aAN2B;AAAA,UAO3BC,iBAP2B,eAO3BA,iBAP2B;AAAA,UAQxBC,SARwB;;AAW7B,UAAMC,MAAM,0EACNP,SADM,UACWE,SAAS,OADpB,gCAENF,SAFM,UAEWE,SAAS,OAFpB,iBAGTD,SAHS,CAAZ;;AAKA,UAAIO,YAAYF,UAAUG,aAA1B;AACA,UAAID,SAAJ,EAAe;AACbA,oBAAY,8BAAM,WAAcR,SAAd,yBAAN,GAAZ;AACD;AACD,aACE,yDACMM,SADN;AAEE,2BAAmB,0BAAWD,iBAAX,EAAiCL,SAAjC,oBAFrB;AAGE,mBAAWA,SAHb;AAIE,mBAAWO,GAJb;AAKE,kCAAiBG,WAAW,OAA5B,EAAqCC,UAAU,MAA/C,IAA0DP,aAA1D,CALF;AAME,uBAAeI,SANjB;AAOE,yBAAiBL,mBAAmBJ,OAAOI,eAP7C;AAQE,aAAK,MAAKR;AARZ,SADF;AAYD,KArDkB;;AAGjB,2BACED,MAAMkB,QAAN,KAAmB,KAAnB,IAA4B,CAAClB,MAAMe,aADrC,EAEE,8DAFF;AAHiB;AAOlB;;;;4BAEO;AACN,WAAKZ,YAAL,CAAkBgB,KAAlB;AACD;;;2BAEM;AACL,WAAKhB,YAAL,CAAkBiB,IAAlB;AACD;;;6BAwCQ;AACP,aACE;AAAA;AAAA;AACE,yBAAc,QADhB;AAEE,yBAAe;AAFjB;AAIG,aAAKhB;AAJR,OADF;AAQD;;;;EA/EqCN,MAAMuB,S;;AAAzBtB,U,CACZuB,Q;AADYvB,U,CAEZwB,Q;AAFYxB,U,CAGZyB,W;AAHYzB,U,CAIZ0B,U;AAJY1B,U,CAMZ2B,Y,GAAe;AACpBpB,aAAW,WADS;AAEpBqB,kBAAgB,UAFI;AAGpBC,wBAAsB,MAHF;AAIpBC,cAAY;AAJQ,C;kBANH9B,U;;;AAkFrBA,WAAW+B,SAAX,GAAuB;AACnBC,OAAK,oBAAUC,MADI;AAEnBC,SAAO,oBAAUD,MAFE;AAGnBd,YAAU,oBAAUgB,IAHD;AAInBC,qBAAmB,oBAAUH,MAJV;AAKnBI,4BAA0B,oBAAUF,IALjB;AAMnBG,wBAAsB,oBAAUH,IANb;AAOnBI,sBAAoB,oBAAUN,MAPX;AAQnBO,qBAAmB,oBAAUP,MARV;AASnBQ,sBAAoB,oBAAUC,SAAV,CAAoB,CAAC,oBAAUP,IAAX,EAAiB,oBAAUQ,MAA3B,CAApB,CATD;AAUnBC,uBAAqB,oBAAUC,KAAV,CAAgB,CAAC,UAAD,EAAa,aAAb,EAA4B,YAA5B,CAAhB,CAVF;AAWnBC,gBAAc,oBAAUX,IAXL;AAYnBY,qBAAmB,oBAAUZ,IAZV;AAanBzB,mBAAiB,oBAAUyB;AAbR,CAAvB","file":"index.js","sourcesContent":["import * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types'\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\n\nexport default class TreeSelect extends React.Component {\n  static TreeNode = TreeNode;\n  static SHOW_ALL = SHOW_ALL;\n  static SHOW_PARENT = SHOW_PARENT;\n  static SHOW_CHILD = SHOW_CHILD;\n\n  static defaultProps = {\n    prefixCls: 'jc-select',\n    transitionName: 'slide-up',\n    choiceTransitionName: 'zoom',\n    showSearch: false,\n  };\n\n  // private rcTreeSelect: any;\n\n  constructor(props) {\n    super(props);\n\n    warning(\n      props.multiple !== false || !props.treeCheckable,\n      '`multiple` will alway be `true` when `treeCheckable` is true',\n    );\n  }\n\n  focus() {\n    this.rcTreeSelect.focus();\n  }\n\n  blur() {\n    this.rcTreeSelect.blur();\n  }\n\n  saveTreeSelect = (node) => {\n    this.rcTreeSelect = node;\n  }\n\n  renderTreeSelect = (locale) => {\n    const {\n      prefixCls,\n      className,\n      size,\n      notFoundContent,\n      dropdownStyle,\n      dropdownClassName,\n      ...restProps,\n    } = this.props;\n\n    const cls = classNames({\n      [`${prefixCls}-lg`]: size === 'large',\n      [`${prefixCls}-sm`]: size === 'small',\n    }, className);\n\n    let checkable = restProps.treeCheckable;\n    if (checkable) {\n      checkable = <span className={`${prefixCls}-tree-checkbox-inner`} />;\n    }\n    return (\n      <RcTreeSelect\n        {...restProps}\n        dropdownClassName={classNames(dropdownClassName, `${prefixCls}-tree-dropdown`)}\n        prefixCls={prefixCls}\n        className={cls}\n        dropdownStyle={{ maxHeight: '100vh', overflow: 'auto', ...dropdownStyle }}\n        treeCheckable={checkable}\n        notFoundContent={notFoundContent || locale.notFoundContent}\n        ref={this.saveTreeSelect}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <LocaleReceiver\n        componentName=\"Select\"\n        defaultLocale={{}}\n      >\n        {this.renderTreeSelect}\n      </LocaleReceiver>\n    );\n  }\n}\n\nTreeSelect.propTypes = {\n    key: PropTypes.string,\n    value: PropTypes.string,\n    multiple: PropTypes.bool,\n    searchPlaceholder: PropTypes.string,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    treeDefaultExpandAll: PropTypes.bool,\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.Object]),\n    showCheckedStrategy: PropTypes.oneOf(['SHOW_ALL', 'SHOW_PARENT', 'SHOW_CHILD']),\n    labelInValue: PropTypes.bool,\n    treeCheckStrictly: PropTypes.bool,\n    notFoundContent: PropTypes.bool,\n};\n"]}