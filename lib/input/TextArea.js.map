{"version":3,"sources":["../../components/input/TextArea.js"],"names":["React","onNextFrame","cb","window","requestAnimationFrame","setTimeout","clearNextFrameAction","nextFrameId","cancelAnimationFrame","clearTimeout","TextArea","props","state","textareaStyles","resizeTextarea","autosize","textAreaRef","minRows","maxRows","setState","handleTextareaChange","e","onChange","handleKeyDown","onPressEnter","onKeyDown","keyCode","saveTextAreaRef","textArea","nextFrameActionId","nextProps","value","focus","blur","prefixCls","className","disabled","otherProps","style","getTextAreaClassName","Component","defaultProps"],"mappings":"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","file":"TextArea.js","sourcesContent":["import * as React from 'react';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\n// eslint校验提示变量没有被使用，暂时注释掉\n// import { AbstractInputProps } from './Input';\nimport calculateNodeHeight from './calculateNodeHeight';\n\nfunction onNextFrame(cb) {\n    if (window.requestAnimationFrame) {\n        return window.requestAnimationFrame(cb);\n    }\n    return window.setTimeout(cb, 1);\n}\n\nfunction clearNextFrameAction(nextFrameId) {\n    if (window.cancelAnimationFrame) {\n        window.cancelAnimationFrame(nextFrameId);\n    } else {\n        window.clearTimeout(nextFrameId);\n    }\n}\n\nexport default class TextArea extends React.Component {\n    constructor(props) {\n        super(props);\n        this.nextFrameActionId = {};\n        this.textAreaRef = {};\n    }\n\n    static defaultProps = {\n        prefixCls: 'jc-input',\n    };\n\n    state = {\n        textareaStyles: {},\n    };\n\n    componentDidMount() {\n        this.resizeTextarea();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // Re-render with the new content then recalculate the height as required.\n        if (this.props.value !== nextProps.value) {\n            if (this.nextFrameActionId) {\n                clearNextFrameAction(this.nextFrameActionId);\n            }\n            this.nextFrameActionId = onNextFrame(this.resizeTextarea);\n        }\n    }\n\n    focus() {\n        this.textAreaRef.focus();\n    }\n\n    blur() {\n        this.textAreaRef.blur();\n    }\n\n    resizeTextarea = () => {\n        const { autosize } = this.props;\n        if (!autosize || !this.textAreaRef) {\n            return;\n        }\n        const minRows = autosize ? autosize.minRows : null;\n        const maxRows = autosize ? autosize.maxRows : null;\n        const textareaStyles = calculateNodeHeight(this.textAreaRef, false, minRows, maxRows);\n        this.setState({ textareaStyles });\n    }\n\n    getTextAreaClassName() {\n        const { prefixCls, className, disabled } = this.props;\n        return classNames(prefixCls, className, {\n            [`${prefixCls}-disabled`]: disabled,\n        });\n    }\n\n    handleTextareaChange = (e) => {\n        if (!('value' in this.props)) {\n            this.resizeTextarea();\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange(e);\n        }\n    }\n\n    handleKeyDown = (e) => {\n        const { onPressEnter, onKeyDown } = this.props;\n        if (e.keyCode === 13 && onPressEnter) {\n            onPressEnter(e);\n        }\n        if (onKeyDown) {\n            onKeyDown(e);\n        }\n    }\n\n    saveTextAreaRef = (textArea) => {\n        this.textAreaRef = textArea;\n    }\n\n    render() {\n        const props = this.props;\n        const otherProps = omit(props, [\n            'prefixCls',\n            'onPressEnter',\n            'autosize',\n        ]);\n        const style = {\n            ...props.style,\n            ...this.state.textareaStyles,\n        };\n        // Fix https://github.com/ant-design/ant-design/issues/6776\n        // Make sure it could be reset when using form.getFieldDecorator\n        if ('value' in otherProps) {\n            otherProps.value = otherProps.value || '';\n        }\n        return (\n            <textarea\n                {...otherProps}\n                className={this.getTextAreaClassName()}\n                style={style}\n                onKeyDown={this.handleKeyDown}\n                onChange={this.handleTextareaChange}\n                ref={this.saveTextAreaRef}\n            />\n        );\n    }\n}\n"]}