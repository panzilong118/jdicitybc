{"version":3,"sources":["../../components/input/calculateNodeHeight.js"],"names":["calculateNodeHeight","HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","computedStyleCache","hiddenTextarea","calculateNodeStyling","node","useCache","nodeRef","getAttribute","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","sizingStyle","map","name","join","nodeInfo","uiTextNode","minRows","maxRows","document","createElement","body","appendChild","setAttribute","removeAttribute","value","placeholder","minHeight","Number","MIN_SAFE_INTEGER","maxHeight","MAX_SAFE_INTEGER","height","scrollHeight","overflowY","singleRowHeight","Math","max","min"],"mappings":"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","file":"calculateNodeHeight.js","sourcesContent":["// Thanks to https://github.com/andreypopp/react-textarea-autosize/\r\n\r\n/**\r\n * calculateNodeHeight(uiTextNode, useCache = false)\r\n */\r\n\r\nconst HIDDEN_TEXTAREA_STYLE = `\r\n  min-height:0 !important;\r\n  max-height:none !important;\r\n  height:0 !important;\r\n  visibility:hidden !important;\r\n  overflow:hidden !important;\r\n  position:absolute !important;\r\n  z-index:-1000 !important;\r\n  top:0 !important;\r\n  right:0 !important\r\n`;\r\n\r\nconst SIZING_STYLE = [\r\n    'letter-spacing',\r\n    'line-height',\r\n    'padding-top',\r\n    'padding-bottom',\r\n    'font-family',\r\n    'font-weight',\r\n    'font-size',\r\n    'text-rendering',\r\n    'text-transform',\r\n    'width',\r\n    'text-indent',\r\n    'padding-left',\r\n    'padding-right',\r\n    'border-width',\r\n    'box-sizing',\r\n];\r\n\r\nconst computedStyleCache = {};\r\nlet hiddenTextarea;\r\n\r\nfunction calculateNodeStyling(node, useCache = false) {\r\n    const nodeRef = (\r\n        node.getAttribute('id') ||\r\n        node.getAttribute('data-reactid') ||\r\n        node.getAttribute('name')\r\n    );\r\n\r\n    if (useCache && computedStyleCache[nodeRef]) {\r\n        return computedStyleCache[nodeRef];\r\n    }\r\n\r\n    const style = window.getComputedStyle(node);\r\n\r\n    const boxSizing = (\r\n        style.getPropertyValue('box-sizing') ||\r\n        style.getPropertyValue('-moz-box-sizing') ||\r\n        style.getPropertyValue('-webkit-box-sizing')\r\n    );\r\n\r\n    const paddingSize = (\r\n        parseFloat(style.getPropertyValue('padding-bottom')) +\r\n        parseFloat(style.getPropertyValue('padding-top'))\r\n    );\r\n\r\n    const borderSize = (\r\n        parseFloat(style.getPropertyValue('border-bottom-width')) +\r\n        parseFloat(style.getPropertyValue('border-top-width'))\r\n    );\r\n\r\n    const sizingStyle = SIZING_STYLE\r\n        .map(name => `${name}:${style.getPropertyValue(name)}`)\r\n        .join(';');\r\n\r\n    const nodeInfo = {\r\n        sizingStyle,\r\n        paddingSize,\r\n        borderSize,\r\n        boxSizing,\r\n    };\r\n\r\n    if (useCache && nodeRef) {\r\n        computedStyleCache[nodeRef] = nodeInfo;\r\n    }\r\n\r\n    return nodeInfo;\r\n}\r\n\r\nexport default function calculateNodeHeight(\r\n    uiTextNode,\r\n    useCache = false,\r\n    minRows,\r\n    maxRows,\r\n) {\r\n    if (!hiddenTextarea) {\r\n        hiddenTextarea = document.createElement('textarea');\r\n        document.body.appendChild(hiddenTextarea);\r\n    }\r\n\r\n    // Fix wrap=\"off\" issue\r\n    // https://github.com/ant-design/ant-design/issues/6577\r\n    if (uiTextNode.getAttribute('wrap')) {\r\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\r\n    } else {\r\n        hiddenTextarea.removeAttribute('wrap');\r\n    }\r\n\r\n    // Copy all CSS properties that have an impact on the height of the content in\r\n    // the textbox\r\n    const {\r\n        paddingSize, borderSize,\r\n        boxSizing, sizingStyle,\r\n    } = calculateNodeStyling(uiTextNode, useCache);\r\n\r\n    // Need to have the overflow attribute to hide the scrollbar otherwise\r\n    // text-lines will not calculated properly as the shadow will technically be\r\n    // narrower for content\r\n    hiddenTextarea.setAttribute('style', `${sizingStyle};${HIDDEN_TEXTAREA_STYLE}`);\r\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\r\n\r\n    let minHeight = Number.MIN_SAFE_INTEGER;\r\n    let maxHeight = Number.MAX_SAFE_INTEGER;\r\n    let height = hiddenTextarea.scrollHeight;\r\n    let overflowY = {};\r\n\r\n    if (boxSizing === 'border-box') {\r\n        // border-box: add border, since height = content + padding + border\r\n        height += borderSize;\r\n    } else if (boxSizing === 'content-box') {\r\n        // remove padding, since height = content\r\n        height -= paddingSize;\r\n    }\r\n\r\n    if (minRows !== null || maxRows !== null) {\r\n        // measure height of a textarea with a single row\r\n        hiddenTextarea.value = ' ';\r\n        const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\r\n        if (minRows !== null) {\r\n            minHeight = singleRowHeight * minRows;\r\n            if (boxSizing === 'border-box') {\r\n                minHeight = minHeight + paddingSize + borderSize;\r\n            }\r\n            height = Math.max(minHeight, height);\r\n        }\r\n        if (maxRows !== null) {\r\n            maxHeight = singleRowHeight * maxRows;\r\n            if (boxSizing === 'border-box') {\r\n                maxHeight = maxHeight + paddingSize + borderSize;\r\n            }\r\n            overflowY = height > maxHeight ? '' : 'hidden';\r\n            height = Math.min(maxHeight, height);\r\n        }\r\n    }\r\n    // Remove scroll bar flash when autosize without maxRows\r\n    if (!maxRows) {\r\n        overflowY = 'hidden';\r\n    }\r\n    return { height, minHeight, maxHeight, overflowY };\r\n}\r\n"]}