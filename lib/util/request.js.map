{"version":3,"sources":["../../components/util/request.js"],"names":["axios","defaults","withCredentials","request","url","options","method","toLowerCase","opts","baseURL","BASE_API_PREFIX","headers","optionData","data","params","then","res","response","status","code","Promise","resolve","history","push","PATHS","LOGIN","reject","Error","msg","catch","err"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEAA,gBAAMC,QAAN,CAAeC,eAAf,GAAiC,IAAjC;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC7B,MAAMC,SAAS,CAACD,QAAQC,MAAR,IAAkB,KAAnB,EAA0BC,WAA1B,EAAf;AACA,MAAMC,OAAO;AACXJ,YADW;AAEXE,kBAFW;AAGXG,aAASJ,QAAQI,OAAR,IAAmBC,uBAHjB;AAIXC,aAASN,QAAQM,OAAR,IAAmB;AAJjB,GAAb;AAMA,MAAMC,aAAaP,QAAQQ,IAAR,IAAgB,EAAnC;AACA,MAAIP,WAAW,KAAf,EAAsBE,KAAKM,MAAL,GAAcF,UAAd,CAAtB,KACKJ,KAAKK,IAAL,GAAYD,UAAZ;AACL,SAAO,qBAAMJ,IAAN,EACJO,IADI,CACC,UAACC,GAAD,EAAS;AACb,QAAMC,WAAWD,OAAO,EAAxB;AADa,QAELE,MAFK,GAEMD,QAFN,CAELC,MAFK;;AAGb,QAAIA,WAAW,GAAf,EAAoB;AAAE;AAAF,2BACKD,SAASJ,IADd;AAAA,UACVA,IADU,kBACVA,IADU;AAAA,UACJM,IADI,kBACJA,IADI;;AAElB,UAAIA,SAAS,GAAb,EAAkB;AAAE;AAClB,eAAOC,QAAQC,OAAR,CAAgBR,IAAhB,CAAP;AACD;AACD;AACA,UAAIM,SAAS,GAAT,IAAgBA,SAAS,GAA7B,EAAkC;AAChCG,wBAAQC,IAAR,CAAaC,cAAMC,KAAnB;AACD;AACD,aAAOL,QAAQM,MAAR,CAAeT,SAASJ,IAAT,IAAiB,OAAhC,CAAP;AACD;AACD,WAAOO,QAAQM,MAAR,CAAe,IAAIC,KAAJ,CAAUX,IAAIY,GAAd,CAAf,CAAP;AACD,GAhBI,EAiBJC,KAjBI,CAiBE,UAACC,GAAD,EAAS;AACd,QAAI,CAACA,IAAIX,IAAT,EAAe,CAAE;AACf;AACD;AACD,WAAOC,QAAQM,MAAR,CAAeI,GAAf,CAAP;AACD,GAtBI,CAAP;AAuBD;;AAED;kBACe3B,O","file":"request.js","sourcesContent":["import axios from 'axios';\nimport { BASE_API_PREFIX } from 'src/config';\nimport { PATHS, history } from 'src/router';\n\naxios.defaults.withCredentials = true;\n\nfunction request(url, options) {\n  const method = (options.method || 'get').toLowerCase();\n  const opts = {\n    url,\n    method,\n    baseURL: options.baseURL || BASE_API_PREFIX,\n    headers: options.headers || {}\n  };\n  const optionData = options.data || {};\n  if (method === 'get') opts.params = optionData;\n  else opts.data = optionData;\n  return axios(opts)\n    .then((res) => {\n      const response = res || {};\n      const { status } = response;\n      if (status === 200) { // http请求没问题\n        const { data, code } = response.data;\n        if (code === 200) { // 如果接口请求没问题直接返回data，有问题则将错误信息全部返回\n          return Promise.resolve(data);\n        }\n        // 登录超时，或用户没有群组 跳登录\n        if (code === 101 || code === 515) {\n          history.push(PATHS.LOGIN);\n        }\n        return Promise.reject(response.data || '服务器错误');\n      }\n      return Promise.reject(new Error(res.msg));\n    })\n    .catch((err) => {\n      if (!err.code) { // 如网络原因错误，打印信息\n        // console.error(err.message);\n      }\n      return Promise.reject(err);\n    });\n}\n\n// module.exports = request;\nexport default request;\n"]}