{"version":3,"sources":["../../components/checkbox/Group.js"],"names":["React","CheckboxGroup","props","toggleOption","option","optionIndex","state","value","indexOf","push","splice","setState","onChange","defaultValue","checkboxGroup","ghost","disabled","nextProps","nextState","options","map","label","prefixCls","className","style","children","length","getOptions","classString","Component","defaultProps","propTypes","string","array","func","bool","childContextTypes","any"],"mappings":"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","file":"Group.js","sourcesContent":["/**\n * @file checkbox封装成一组\n * @author chenyanhua\n */\nimport * as React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport shallowEqual from 'shallowequal';\n\nimport Checkbox from './Checkbox';\n\nexport default class CheckboxGroup extends React.Component {\n    static defaultProps = {\n        options: [],\n        prefixCls: 'jc-checkbox-group',\n        ghost: false\n    };\n\n    static propTypes = {\n        prefixCls: PropTypes.string,\n        defaultValue: PropTypes.array, // 默认选中的选项\n        value: PropTypes.array, // 指定选中的选项\n        options: PropTypes.array, // 指定可选项，数据源\n        onChange: PropTypes.func,\n        ghost: PropTypes.bool\n    };\n\n    static childContextTypes = {\n        checkboxGroup: PropTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value || props.defaultValue || []\n        };\n    }\n    /**\n     * 向子组件checkbox传递当前checkbox组相关数据\n     */\n    getChildContext() {\n        return {\n            checkboxGroup: {\n                ghost: this.props.ghost,\n                toggleOption: this.toggleOption, // 当前操作的checkbox项目\n                value: this.state.value, // checkbox组已选中数据\n                disabled: this.props.disabled // 当前组的disabled，作用于当前组的所有checkbox\n            }\n        };\n    }\n    /**\n     * 设置选中项\n     */\n    componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n            this.setState({\n                value: nextProps.value || []\n            });\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n    }\n    /**\n     * 重组数据源\n     */\n    getOptions() {\n        const { options } = this.props;\n        // https://github.com/Microsoft/TypeScript/issues/7960\n        return options.map((option) => {\n            if (typeof option === 'string') {\n                return { label: option, value: option };\n            }\n            return option;\n        });\n    }\n    /**\n     * 切换当前操作项目的checked/unchecked状态\n     * @param option 当前操作的checkbox选项\n     */\n    toggleOption = (option) => {\n        const optionIndex = this.state.value.indexOf(option.value);\n        const value = [...this.state.value];\n        if (optionIndex === -1) {\n            value.push(option.value);\n        } else {\n            value.splice(optionIndex, 1);\n        }\n        if (!('value' in this.props)) {\n            this.setState({ value });\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange(value);\n        }\n    }\n    render() {\n        const { prefixCls, className, style, options, ghost } = this.props;\n        let { children } = this.props;\n        if (options && options.length > 0) {\n            // 输出每一项checkbox\n            children = this.getOptions().map(option => (\n                <Checkbox\n                    ghost={ghost}\n                    key={option.value}\n                    disabled={'disabled' in option ? option.disabled : this.props.disabled}\n                    value={option.value}\n                    checked={this.state.value.indexOf(option.value) !== -1}\n                    onChange={() => this.toggleOption(option)}\n                    className={`${prefixCls}-item`}\n                >\n                    {option.label}\n                </Checkbox>\n            ));\n        }\n\n        const classString = classNames(prefixCls, className);\n        return (\n            <div className={classString} style={style}>\n                {children}\n            </div>\n        );\n    }\n}\n"]}