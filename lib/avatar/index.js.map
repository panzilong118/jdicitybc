{"version":3,"sources":["../../components/avatar/index.js"],"names":["React","ReactDOM","Avatar","props","setScale","childrenNode","avatarChildren","childrenWidth","offsetWidth","avatarWidth","findDOMNode","getBoundingClientRect","width","setState","scale","handleImgLoadError","isImgExist","state","undefined","prevProps","prevState","children","prefixCls","shape","size","src","icon","className","others","sizeCls","classString","childrenStyle","msTransform","WebkitTransform","transform","position","display","left","Math","round","span","Component","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Created by gaoqingli on 2018/4/13.\r\n */\r\nimport * as React from 'react';\r\n\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport Icon from '../icon';\r\n\r\nexport default class Avatar extends React.Component {\r\n  static defaultProps = {\r\n      prefixCls: 'jc-avatar',\r\n      shape: 'circle',\r\n      size: 'default',\r\n  };\r\n\r\n  // static avatarChildren;\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          scale: 1,\r\n          isImgExist: true,\r\n      };\r\n      this.avatarChildren = undefined;\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.setScale();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n      if (prevProps.children !== this.props.children\r\n        || (prevState.scale !== this.state.scale && this.state.scale === 1)) {\r\n          this.setScale();\r\n      }\r\n  }\r\n\r\n  setScale = () => {\r\n      const childrenNode = this.avatarChildren;\r\n      if (childrenNode) {\r\n          const childrenWidth = childrenNode.offsetWidth;\r\n          const avatarWidth = ReactDOM.findDOMNode(this).getBoundingClientRect().width;\r\n          // add 4px gap for each side to get better performance\r\n          if (avatarWidth - 8 < childrenWidth) {\r\n              this.setState({\r\n                  scale: (avatarWidth - 8) / childrenWidth,\r\n              });\r\n          } else {\r\n              this.setState({\r\n                  scale: 1,\r\n              });\r\n          }\r\n      }\r\n  }\r\n\r\n  handleImgLoadError = () => this.setState({ isImgExist: false });\r\n\r\n  render() {\r\n      const {\r\n          prefixCls, shape, size, src, icon, className, ...others\r\n      } = this.props;\r\n\r\n      const sizeCls = classNames({\r\n          [`${prefixCls}-lg`]: size === 'large',\r\n          [`${prefixCls}-sm`]: size === 'small',\r\n      });\r\n\r\n      const classString = classNames(prefixCls, className, sizeCls, {\r\n          [`${prefixCls}-${shape}`]: shape,\r\n          [`${prefixCls}-image`]: src && this.state.isImgExist,\r\n          [`${prefixCls}-icon`]: icon,\r\n      });\r\n\r\n      let { children } = this.props;\r\n      if (src && this.state.isImgExist) {\r\n          children = (\r\n              <img\r\n                  alt=''\r\n                  src={src}\r\n                  onError={this.handleImgLoadError}\r\n              />\r\n          );\r\n      } else if (icon) {\r\n          children = <Icon type={icon} />;\r\n      } else {\r\n          const childrenNode = this.avatarChildren;\r\n          if (childrenNode || this.state.scale !== 1) {\r\n              const childrenStyle: React.CSSProperties = {\r\n                  msTransform: `scale(${this.state.scale})`,\r\n                  WebkitTransform: `scale(${this.state.scale})`,\r\n                  transform: `scale(${this.state.scale})`,\r\n                  position: 'absolute',\r\n                  display: 'inline-block',\r\n                  left: `calc(50% - ${Math.round(childrenNode.offsetWidth / 2)}px)`,\r\n              };\r\n              children = (\r\n                  <span\r\n                      className={`${prefixCls}-string`}\r\n                      ref={(span) => { this.avatarChildren = span; }}\r\n                      style={childrenStyle}\r\n                  >\r\n                      {children}\r\n                  </span>\r\n              );\r\n          } else {\r\n              children = (\r\n                  <span\r\n                      className={`${prefixCls}-string`}\r\n                      ref={(span) => { this.avatarChildren = span; }}\r\n                  >\r\n                      {children}\r\n                  </span>\r\n              );\r\n          }\r\n      }\r\n      return (\r\n          <span {...others} className={classString}>\r\n              {children}\r\n          </span>\r\n      );\r\n  }\r\n}\r\n"]}