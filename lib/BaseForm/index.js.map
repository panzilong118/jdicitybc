{"version":3,"sources":["../../components/BaseForm/index.js"],"names":["FormItem","Item","defaultLabelColSpan","defaultFormItemLayout","labelCol","span","wrapperCol","BaseForm","renderFormItem","item","layout","getFieldDecorator","col","label","key","required","component","options","rules","message","props","items","form","overflow","map","onValid","validateFieldsAndScroll","resetFields","err","values","React","Component","create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;+eA7CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,IAAMA,WAAW,eAAKC,IAAtB;AACA;AACO,IAAMC,oDAAsB,CAA5B;AACP,IAAMC,wBAAwB;AAC5BC,YAAU,EAAEC,MAAMH,mBAAR,EADkB;AAE5BI,cAAY,EAAED,MAAM,EAAR;AAFgB,CAA9B;;IAKME,Q;;;;;;;;;;;;;;0LAYJC,c,GAAiB,iBAAyC;AAAA,UAAtCC,IAAsC,SAAtCA,IAAsC;AAAA,UAAhCC,MAAgC,SAAhCA,MAAgC;AAAA,UAAxBC,iBAAwB,SAAxBA,iBAAwB;AAAA,sBAGpDF,IAHoD,CAEtDG,GAFsD;AAAA,UAEtDA,GAFsD,6BAEhD,EAFgD;AAAA,UAE5CC,KAF4C,GAGpDJ,IAHoD,CAE5CI,KAF4C;AAAA,UAErCC,GAFqC,GAGpDL,IAHoD,CAErCK,GAFqC;AAAA,UAEhCC,QAFgC,GAGpDN,IAHoD,CAEhCM,QAFgC;AAAA,UAEtBC,SAFsB,GAGpDP,IAHoD,CAEtBO,SAFsB;AAAA,0BAGpDP,IAHoD,CAEXQ,OAFW;AAAA,UAEXA,OAFW,iCAED,EAFC;AAAA,UAEGC,KAFH,GAGpDT,IAHoD,CAEGS,KAFH;;AAIxD,aACE;AAAA;AAAA,UAAK,MAAMN,GAAX,EAAgB,KAAKE,GAArB;AACE;AAAC,kBAAD;AAAA,qBAAU,OAAOD,KAAjB,IAA4BH,MAA5B;AACGC,4BAAkBG,GAAlB,eACIG,OADJ;AAECC,mBAAOA,SAAS,CAAC,EAAEH,kBAAF,EAAYI,SAAYN,KAAZ,iBAAZ,EAAD;AAFjB,cAGEG,aAAa,oDAHf;AADH;AADF,OADF;AAUD,K;;;;;6BAEQ;AAAA;;AAAA,mBAGH,KAAKI,KAHF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,iCAEEX,MAFF;AAAA,UAEEA,MAFF,iCAEWP,qBAFX;AAAA,UAE0CQ,iBAF1C,UAEkCW,IAFlC,CAE0CX,iBAF1C;;AAIP,aACE;AAAA;AAAA,UAAM,OAAO,EAAEY,UAAU,QAAZ,EAAb;AACGF,cAAMG,GAAN,CACC;AAAA,iBAAQ,OAAKhB,cAAL,CAAoB,EAAEC,UAAF,EAAQC,cAAR,EAAgBC,oCAAhB,EAApB,CAAR;AAAA,SADD;AADH,OADF;AAOD;;;kCAtCuDc,O,EAAS;AAAA;;AAAA,UAAjDC,uBAAiD,SAAjDA,uBAAiD;AAAA,UAAxBC,WAAwB,SAAxBA,WAAwB;;AAC/DD;AAAA,4EAAwB,iBAAOE,GAAP,EAAYC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,uBAClBD,GADkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,yBAIhBH,QAAQI,MAAR,CAJgB;;AAAA;AAKtBF;;AALsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxB;;AAAA;AAAA;AAAA;AAAA;AAOD;;AAED;;;;;EAXqBG,gBAAMC,S;;kBA0Cd,eAAKC,MAAL,GAAczB,QAAd,C","file":"index.js","sourcesContent":["/**\n * form表单 base版\n * props:\n * @param {object} layout { labelCol: { span }, wrapperCol: { span } }\n * @param {array} items\n *    items=[{\n *      col,  // column\n *      label,\n *      key,\n *      required,\n *      component, // default is Input\n *      options = {},\n *      rules\n *    }]\n *\n * usage:\n *  import { Form } from 'src/components/common'\n *\n *  add = (e) =>{\n *    const { onOk } = this.props;\n *    Form.submit(e, this.formRef, (values) => {\n *      console.log('valide', values)\n *      // post to server\n *      onOk()\n *    })\n *  }\n *\n *  // render\n *  <Form\n *    items={[{\n *      label: '目录名',\n *      required: true,\n *      key: 'name'\n *    }, {\n *      label: '是否挂表',\n *      key: 'isLast',\n *      component: (\n *        <Switch\n *          checkedChildren={<Icon type=\"check\" />}\n *          unCheckedChildren={<Icon type=\"close\" />}\n *        />\n *      )\n *    }]}\n *  />\n*/\nimport React from 'react';\nimport { Form, Input, Col } from 'antd';\n\nconst FormItem = Form.Item;\n// 默认的layout\nexport const defaultLabelColSpan = 6;\nconst defaultFormItemLayout = {\n  labelCol: { span: defaultLabelColSpan },\n  wrapperCol: { span: 16 },\n};\n\nclass BaseForm extends React.Component {\n  static submit({ validateFieldsAndScroll, resetFields }, onValid) {\n    validateFieldsAndScroll(async (err, values) => {\n      if (err) {\n        return;\n      }\n      await onValid(values);\n      resetFields();\n    });\n  }\n\n  // 渲染单个表单项\n  renderFormItem = ({ item, layout, getFieldDecorator }) => {\n    const {\n      col = 24, label, key, required, component, options = {}, rules\n    } = item;\n    return (\n      <Col span={col} key={key}>\n        <FormItem label={label} {...layout}>\n          {getFieldDecorator(key, {\n            ...options,\n            rules: rules || [{ required, message: `${label}为空` }],\n          })(component || <Input />)}\n        </FormItem>\n      </Col>\n    );\n  }\n\n  render() {\n    const {\n      items, layout = defaultFormItemLayout, form: { getFieldDecorator }\n    } = this.props;\n    return (\n      <Form style={{ overflow: 'hidden' }}>\n        {items.map(\n          item => this.renderFormItem({ item, layout, getFieldDecorator })\n        )}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(BaseForm);\n"]}