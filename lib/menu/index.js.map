{"version":3,"sources":["../../components/menu/index.js"],"names":["menuModeDS","Menu","props","getInlineCollapsed","inlineCollapsed","context","siderCollapsed","undefined","getRealMenuMode","switchModeFromInline","mode","getMenuOpenAnimation","menuMode","openAnimation","openTransitionName","menuOpenAnimation","leave","node","done","setState","handleOpenChange","openKeys","setOpenKeys","onOpenChange","handleClick","e","onClick","leaveAnimationExecutedWhencollapsed","inlineOpenKeys","state","defaultOpenKeys","jcMenuTheme","theme","nextProps","nextContext","prefixCls","length","querySelectorAll","className","menuClassName","menuProps","collapsedWidth","Component","Divider","Item","SubMenu","ItemGroup","defaultProps","propTypes","arrayOf","string","defaultSelectedKeys","bool","inlineIndent","number","oneOf","multiple","selectable","selectedKeys","style","object","subMenuCloseDelay","subMenuOpenDelay","func","onDeselect","onSelect","oneOfType","childContextTypes","contextTypes"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file 二次封装rc-menu\n * @author chenyanhua\n * @version: 3.2.3\n */\nimport React from 'react';\n\nimport { findDOMNode } from 'react-dom';\n\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\n\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport SubMenu from './SubMenu';\n\nimport Item from './MenuItem';\n\nimport animation from '../_util/openAnimation.js';\n\n// 菜单模式\nconst menuModeDS = ['vertical', 'vertical-left', 'vertical-right', 'horizontal', 'inline'];\n\nexport default class Menu extends React.Component {\n    static Divider = Divider;\n    static Item = Item;\n    static SubMenu = SubMenu;\n    static ItemGroup = ItemGroup;\n\n    static defaultProps = {\n        prefixCls: 'jc-menu',\n        className: '',\n        theme: 'light', // or dark\n    };\n\n    static propTypes = {\n        defaultOpenKeys: PropTypes.arrayOf(PropTypes.string), // 初始展开的 SubMenu 菜单项 key 数组\n        defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string), // 初始选中的菜单项 key 数组\n        inlineCollapsed: PropTypes.bool, // 菜单是否收起状态(作用于所有的mode状态)\n        inlineIndent: PropTypes.number, // inline mode 菜单缩进宽度\n        mode: PropTypes.oneOf(menuModeDS), // 菜单模式\n        multiple: PropTypes.bool, // 是否允许多选\n        openKeys: PropTypes.arrayOf(PropTypes.string), // 当前展开的 SubMenu 菜单项 key 数组\n        selectable: PropTypes.bool, // 是否允许选中\n        selectedKeys: PropTypes.arrayOf(PropTypes.string), // 当前选中的菜单项 key 数组\n        style: PropTypes.object,\n        subMenuCloseDelay: PropTypes.number, // 用户鼠标离开子菜单后关闭延时，单位：秒\n        subMenuOpenDelay: PropTypes.number, // 用户鼠标进入子菜单后展开延时，单位：秒\n        theme: PropTypes.oneOf(['light', 'dark']), // 主题\n        onClick: PropTypes.func, // 点击 MenuItem 调用此函数\n        onDeselect: PropTypes.func, // 取消选中时调用，仅在 multiple 生效\n        onOpenChange: PropTypes.func, // SubMenu 展开/关闭的回调\n        onSelect: PropTypes.func, // 被选中时调用\n        openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n        openTransitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n        className: PropTypes.string,\n        prefixCls: PropTypes.string\n    };\n\n    // 向下传参\n    // siderCollapsed存在时，inlineCollapsed无效\n    // 因此，在SiderCollapsed存在的情况下，inlineCollapsed无效\n    static childContextTypes = {\n        inlineCollapsed: PropTypes.bool,\n        jcMenuTheme: PropTypes.string // 主题样式\n    };\n\n    /**\n     * 收起参数\n     * @variable siderCollapsed ： Sider是否收起\n     * @collapsedWidth ： Sider收起时宽度\n     */\n    static contextTypes = {\n        siderCollapsed: PropTypes.bool,\n        collapsedWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    };\n\n    constructor(props) {\n        super(props);\n        this.switchModeFromInline = false;\n        this.leaveAnimationExecutedWhencollapsed = false; // inline 时当菜单收起时是否展示动画\n        this.inlineOpenKeys = []; // 备份openKeys数组\n\n        // 初始化展开菜单\n        this.state = {\n            openKeys: props.defaultOpenKeys || props.openKeys || []\n        };\n    }\n\n    // 向下传参\n    getChildContext() {\n        return {\n            inlineCollapsed: this.getInlineCollapsed(),\n            jcMenuTheme: this.props.theme\n        };\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        const { prefixCls } = this.props;\n        if (this.props.mode === 'inline' && nextProps.mode !== 'inline') {\n            this.switchModeFromInline = true;\n        }\n        if ('openKeys' in nextProps) {\n            this.setState({ openKeys: nextProps.openKeys });\n            return;\n        }\n        if ((nextProps.inlineCollapsed && !this.props.inlineCollapsed) || (nextContext.siderCollapsed && !this.context.siderCollapsed)) {\n            this.switchModeFromInline = !!this.state.openKeys.length && !!findDOMNode(this).querySelectorAll(`.${prefixCls}-submenu-open`).length;\n            this.inlineOpenKeys = this.state.openKeys;\n            this.setState({ openKeys: [] });\n        }\n        if ((!nextProps.inlineCollapsed && this.props.inlineCollapsed) || (!nextContext.siderCollapsed && this.context.siderCollapsed)) {\n            this.setState({ openKeys: this.inlineOpenKeys });\n            this.inlineOpenKeys = [];\n        }\n    }\n    /**\n     * 菜单是否收起\n     * siderCollapsed存在时，inlineCollapsed无效\n     */\n    getInlineCollapsed = () => {\n        const { inlineCollapsed } = this.props;\n        if (this.context.siderCollapsed !== undefined) {\n            return this.context.siderCollapsed;\n        }\n        return inlineCollapsed;\n    }\n    getRealMenuMode = () => {\n        const inlineCollapsed = this.getInlineCollapsed();\n        if (this.switchModeFromInline && inlineCollapsed) {\n            return 'inline';\n        }\n        const { mode } = this.props;\n        return inlineCollapsed ? 'vertical' : mode;\n    }\n    getMenuOpenAnimation = (menuMode) => {\n        const { openAnimation, openTransitionName } = this.props;\n        let menuOpenAnimation = openAnimation || openTransitionName;\n        if (openAnimation === undefined && openTransitionName === undefined) {\n            switch (menuMode) {\n            case 'horizontal':\n                menuOpenAnimation = 'slide-up';\n                break;\n            case 'vertical':\n            case 'vertical-left':\n            case 'vertical-right':\n                // When mode switch from inline\n                // submenu should hide without animation\n                if (this.switchModeFromInline) {\n                    menuOpenAnimation = '';\n                    this.switchModeFromInline = false;\n                } else {\n                    menuOpenAnimation = 'zoom-big';\n                }\n                break;\n            case 'inline':\n                menuOpenAnimation = {\n                    ...animation,\n                    leave: (node, done) => animation.leave(node, () => {\n                        // Make sure inline menu leave animation finished before mode is switched\n                        this.switchModeFromInline = false;\n                        this.setState({});\n                        // when inlineCollapsed change false to true, all submenu will be unmounted,\n                        // so that we don't need handle animation leaving.\n                        if (this.getRealMenuMode() === 'vertical') {\n                            return;\n                        }\n                        done();\n                    })\n                };\n                break;\n            default:\n            }\n        }\n        return menuOpenAnimation;\n    }\n    setOpenKeys(openKeys) {\n        if (!('openKeys' in this.props)) {\n            this.setState({ openKeys });\n        }\n    }\n    /**\n     * SubMenu 展开/收起的回调\n     * @param openKeys 展开的菜单\n     */\n    handleOpenChange = (openKeys) => {\n        // 重新设置当前展开菜单\n        this.setOpenKeys(openKeys);\n\n        // 处理用户传递的回调\n        const { onOpenChange } = this.props;\n        if (onOpenChange) {\n            onOpenChange(openKeys);\n        }\n    }\n    /**\n     * menuItem click: 点击MenuItem时，关闭已经展开的菜单\n     * @param e mouse事件\n     */\n    handleClick = (e) => {\n        // 清空openKeys：关闭已经展开的菜单\n        this.handleOpenChange([]);\n\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick(e);\n        }\n    }\n    render() {\n        const { prefixCls, className, theme } = this.props;\n        const menuMode = this.getRealMenuMode();\n        const menuOpenAnimation = this.getMenuOpenAnimation(menuMode);\n\n        const menuClassName = classNames(className, `${prefixCls}-${theme}`, {\n            [`${prefixCls}-inline-collapsed`]: this.getInlineCollapsed(),\n        });\n\n        const menuProps = {\n            openKeys: this.state.openKeys,\n            onOpenChange: this.handleOpenChange,\n            className: menuClassName,\n            mode: menuMode,\n        };\n\n        if (menuMode !== 'inline') {\n            // closing vertical popup submenu after click it\n            menuProps.onClick = this.handleClick;\n            menuProps.openTransitionName = menuOpenAnimation;\n        } else {\n            menuProps.openAnimation = menuOpenAnimation;\n        }\n\n        // https://github.com/ant-design/ant-design/issues/8587\n        const { collapsedWidth } = this.context;\n        if (\n            this.getInlineCollapsed() &&\n            (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')\n        ) {\n            return null;\n        }\n\n        return <RcMenu {...this.props} {...menuProps} />;\n    }\n}\n"]}