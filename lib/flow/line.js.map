{"version":3,"sources":["../../components/Flow/line.js"],"names":["Line","active","path","idx","onClick","props","e","linesEl","nodes","lines","activeIdx","tmpLine","map","line","source","target","sourceAnchor","targetAnchor","sourcePosition","output","targetPosition","input","buildLine","targetPosi","push","React","Component"],"mappings":";;;;;;;;AAiBA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;+eAtBA;;;;;;;;;;;;;;;;;IAwBMA,I;;;;;;;;;;;8BAmCMC,M,EAAQC,I,EAAMC,G,EAAK;AAAA,UACnBC,QADmB,GACP,KAAKC,KADE,CACnBD,OADmB;;AAE3B,aACE;AACE,uBAAaD,GADf;AAEE,0CAA+BF,SAAS,SAAT,GAAqB,EAApD,OAFF;AAGE,mCAAwBA,SAAS,aAAT,GAAyB,EAAjD,CAHF;AAIE,WAAGC,IAJL;AAKE,iBAAS;AAAA,iBAAKE,SAAQE,CAAR,EAAWH,GAAX,CAAL;AAAA;AALX,QADF;AASD;;;6BAEQ;AACP,aACE;AAAC,uBAAD,CAAO,QAAP;AAAA;AACE,sCAAC,gBAAD,OADF;AAEI,aAAKI;AAFT,OADF;AAMD;;;wBAtDa;AAAA;;AAAA,mBAIR,KAAKF,KAJG;AAAA,UAEVG,KAFU,UAEVA,KAFU;AAAA,UAGVC,KAHU,UAGVA,KAHU;AAAA,UAGHC,SAHG,UAGHA,SAHG;AAAA,UAGQC,OAHR,UAGQA,OAHR;;AAKZ,UAAMJ,UAAUE,MAAMG,GAAN,CAAU,UAACC,IAAD,EAAOV,GAAP,EAAe;AAAA,YAErCW,MAFqC,GAInCD,IAJmC,CAErCC,MAFqC;AAAA,YAE7BC,MAF6B,GAInCF,IAJmC,CAE7BE,MAF6B;AAAA,YAGrCC,YAHqC,GAInCH,IAJmC,CAGrCG,YAHqC;AAAA,YAGvBC,YAHuB,GAInCJ,IAJmC,CAGvBI,YAHuB;;;AAMvC,YAAMC,iBAAiB,wCACrBF,YADqB,EACPR,MAAMM,MAAN,EAAcK,MADP,EACeX,MAAMM,MAAN,CADf,CAAvB;AAGA,YAAMM,iBAAiB,wCACrBH,YADqB,EACPT,MAAMO,MAAN,EAAcM,KADP,EACcb,MAAMO,MAAN,CADd,CAAvB;AAGA,YAAMd,SAASE,QAAQO,SAAvB;AACA,YAAMR,OAAO,uBAAY,CAACgB,cAAD,EAAiBE,cAAjB,CAAZ,CAAb;AACA,eAAO,OAAKE,SAAL,CAAerB,MAAf,EAAuBC,IAAvB,EAA6BC,GAA7B,CAAP;AACD,OAfe,CAAhB;;AALY,UAsBJW,MAtBI,GAsBiCH,OAtBjC,CAsBJG,MAtBI;AAAA,UAsBIE,YAtBJ,GAsBiCL,OAtBjC,CAsBIK,YAtBJ;AAAA,UAsBkBO,UAtBlB,GAsBiCZ,OAtBjC,CAsBkBY,UAtBlB;;AAuBZ,UAAI,mCAAeT,MAAf,CAAJ,EAA4B;AAC1B,YAAMI,iBAAiB,wCACrBF,YADqB,EACPR,MAAMM,MAAN,EAAcK,MADP,EACeX,MAAMM,MAAN,CADf,CAAvB;;AAIA,YAAMZ,OAAO,uBAAY,CAACgB,cAAD,EAAiBK,UAAjB,CAAZ,CAAb;AACAhB,gBAAQiB,IAAR,CAAa,KAAKF,SAAL,CAAe,KAAf,EAAsBpB,IAAtB,EAA4B,KAA5B,CAAb;AACD;AACD,aAAOK,OAAP;AACD;;;;EAjCgBkB,gBAAMC,S;;kBA0DV1B,I","file":"line.js","sourcesContent":["/**\n * add line and dot\n * {\n *  id: 'string',\n *  source: 'node1',\n *  target: 'node2',\n *  sourceAnchor: 0,\n *  targetAnchor: 2\n * }\n * 根据 source 和 target 描点\n * - getX = (idx) => x - boxWidth/2 + (idx + 1) * boxWidth/count\n * - y = top or bottom\n *\n * - edit line function: 贝塞尔曲线\n *\n * */\n\nimport React from 'react';\nimport './style/line.less';\nimport { getLinePath } from './util/drag';\nimport Arrows from './Arrows';\nimport { getAnchorPosition } from './util/computePosition';\nimport { valideIdxCheck } from './util/validateCheck';\n\nclass Line extends React.Component {\n  get linesEl() {\n    const {\n      nodes,\n      lines, activeIdx, tmpLine\n    } = this.props;\n    const linesEl = lines.map((line, idx) => {\n      const {\n        source, target,\n        sourceAnchor, targetAnchor\n      } = line;\n\n      const sourcePosition = getAnchorPosition(\n        sourceAnchor, nodes[source].output, nodes[source]\n      );\n      const targetPosition = getAnchorPosition(\n        targetAnchor, nodes[target].input, nodes[target]\n      );\n      const active = idx === activeIdx;\n      const path = getLinePath([sourcePosition, targetPosition]);\n      return this.buildLine(active, path, idx);\n    });\n\n    const { source, sourceAnchor, targetPosi } = tmpLine;\n    if (valideIdxCheck(source)) {\n      const sourcePosition = getAnchorPosition(\n        sourceAnchor, nodes[source].output, nodes[source]\n      );\n\n      const path = getLinePath([sourcePosition, targetPosi]);\n      linesEl.push(this.buildLine(false, path, 'tmp'));\n    }\n    return linesEl;\n  }\n\n  buildLine(active, path, idx) {\n    const { onClick } = this.props;\n    return (\n      <path\n        key={`line-${idx}`}\n        markerEnd={`url(#marker-arrow${active ? '-active' : ''})`}\n        className={`jdic-line ${active ? 'jdic-active' : ''}`}\n        d={path}\n        onClick={e => onClick(e, idx)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Arrows></Arrows>\n        { this.linesEl }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Line;\n"]}