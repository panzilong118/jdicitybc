{"version":3,"sources":["../../components/flow/job.js"],"names":["Job","state","resizeNodeIdx","restoreStyle","setState","setTarget","target","targetAnchor","tmpLine","props","onDrawLine","onDragLine","line","mouseMove","el","source","sourceAnchor","nodes","dragHandler","x","y","targetPosi","point","resize","node","direction","onResize","getDistance","curDirect","cur","boxLen","id","width","height","size","anchors","nodeIdx","canDrag","len","map","idx","key","type","top","left","colCtrl","bottom","cursor","rowCtrl","right","bottomRightCtrl","onDrag","moveable","reset","render","onClick","flexible","ext","delete","bindDrag","e","getAnchor","input","output","getFlexibleControl","scale","React","Component"],"mappings":"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","file":"job.js","sourcesContent":["import React from 'react';\nimport { get, debounce } from 'lodash';\nimport './style/job.less';\nimport { getTranslate, dragHandler } from './util/drag';\nimport { getAnchorOffset } from './util/computePosition';\nimport Tooltip from './util/Tooltip';\nimport { validFunc } from './util/validate';\n\nclass Job extends React.Component {\n  state = {\n    resizeNodeIdx: -1\n  };\n\n  restoreStyle = debounce(() => {\n    // eslint-disable-next-line\n    this.setState({ resizeNodeIdx: -1 });\n  }, 1000);\n\n  getAnchor(anchors, { height, width }, nodeIdx, canDrag) {\n    const len = get(anchors, 'length');\n    if (!len) return;\n\n    return anchors.map(({ key, type }, idx) => {\n      const { x, y } = getAnchorOffset(idx, { height, width }, anchors);\n      return (\n        key ? <Tooltip\n          key={`anchor-${idx}`}\n          limit=\"0\"\n          title={`字段名: ${key}, 类型: ${type}`}\n          render={() => (\n            <div\n              style={{ top: y, left: x }}\n              className=\"input\"\n              ref={el => canDrag && el && this.mouseMove(el, nodeIdx, idx)}\n              onMouseEnter={() => this.setTarget(nodeIdx, idx)}\n            />\n          )}\n        /> : <div\n          style={{ top: y, left: x }}\n          key={`anchor-${idx}`}\n          className=\"input\"\n          ref={el => (\n            canDrag && el && this.mouseMove(el, nodeIdx, idx)\n          )}\n          onMouseEnter={() => this.setTarget(nodeIdx, idx)}\n        >\n        </div>\n      );\n    });\n  }\n\n  setTarget = (target, targetAnchor) => {\n    const { tmpLine } = this;\n    if (!tmpLine) return;\n    const { onDrawLine, onDragLine } = this.props;\n    const line = {\n      ...tmpLine,\n      target,\n      targetAnchor\n    };\n    onDragLine({});\n    onDrawLine(line);\n  };\n\n  get dragHandler() {\n    const { scale } = this.props;\n    return dragHandler(scale);\n  }\n\n  getFlexibleControl(node) {\n    const { id } = node;\n    const colCtrl = [0, '100%'].map(left => (\n      <div\n        key={`col-${id}-${left}`}\n        className=\"flexibleControl\"\n        style={{\n          left,\n          top: 0,\n          bottom: 0,\n          cursor: left && 'col-resize'\n        }}\n        ref={el => left && this.resize(el, node, 'dx')}\n      />\n    ));\n    const rowCtrl = [0, '100%'].map(top => (\n      <div\n        key={`row-${id}-${top}`}\n        className=\"flexibleControl\"\n        style={{\n          top,\n          left: 0,\n          right: 0,\n          cursor: top && 'row-resize'\n        }}\n        ref={el => top && this.resize(el, node, 'dy')}\n      />\n    ));\n    const bottomRightCtrl = (\n      <svg\n        key={`br-${id}`}\n        height=\"12\"\n        width=\"12\"\n        className=\"bottomRight\"\n        ref={el => this.resize(el, node)}\n      >\n        <polygon points=\"0,12 12,12 12,0\" />\n        Sorry, your browser does not support inline SVG.\n      </svg>\n    );\n    return [...rowCtrl, ...colCtrl, bottomRightCtrl];\n  }\n\n  mouseMove = (el, source, sourceAnchor) => {\n    const { nodes } = this.props;\n    const { onDragLine } = this.props;\n    this.dragHandler(\n      el,\n      point => {\n        const { x, y } = nodes[source];\n        this.tmpLine = {\n          source,\n          sourceAnchor,\n          // fix anchor position offset\n          targetPosi: {\n            x: point.x + x,\n            y: point.y + y\n          }\n        };\n        onDragLine(this.tmpLine);\n      },\n      () => {\n        this.tmpLine = null;\n        onDragLine({});\n      }\n    );\n  };\n\n  resize = (el, node, direction) => {\n    const { onResize } = this.props;\n    const getDistance = (curDirect, cur, boxLen) =>\n      (direction && direction !== curDirect ? boxLen : cur);\n\n    this.dragHandler(el, point => {\n      const { x, y } = point;\n      const { id, width, height } = node;\n      const size = {\n        width: getDistance('dx', x, width),\n        height: getDistance('dy', y, height)\n      };\n      validFunc(onResize, id, size);\n      const { resizeNodeIdx } = this.state;\n      resizeNodeIdx === -1 && this.setState({ resizeNodeIdx: node.id });\n      this.restoreStyle(el);\n    });\n  };\n\n  bindDrag(el, { idx }) {\n    const { onDrag } = this.props;\n    if (!onDrag) return;\n    // 当鼠标移动一些距离的时候才开始处罚onDrag\n    let moveable = 0;\n    const reset = debounce(() => { moveable = 0; }, 1000);\n    this.dragHandler(el, point => {\n      moveable += 1;\n      if (moveable < 3) return;\n      onDrag(idx, point);\n      reset();\n    });\n  }\n\n  render() {\n    // const { resizeNodeIdx } = this.state;\n    const {\n      nodes, render, onClick, flexible\n    } = this.props;\n    return (\n      <React.Fragment>\n        {nodes.map((node, idx) => {\n          const {\n            x, y, width, height\n          } = node;\n\n          // 错上修错 -- 需要修改成根据 nodeId 和 anchorId 来标识节点和圈圈\n          return !node.ext.delete && (\n            <span\n              key={`job-wrap-${idx}`}\n              className=\"jobWrap\"\n              ref={el => el && this.bindDrag(el, { idx })}\n              style={getTranslate({ x, y })}\n            >\n              <div\n                key={`job-${idx}`}\n                className=\"job\"\n                style={{ width, height }}\n                onClick={e => onClick(e, idx)}\n              >\n                {this.getAnchor(\n                  node.input,\n                  {\n                    width,\n                    height: 0\n                  },\n                  idx\n                )}\n                {this.getAnchor(\n                  node.output,\n                  {\n                    width,\n                    height\n                  },\n                  idx,\n                  true\n                )}\n                {flexible && this.getFlexibleControl(node)}\n                {render(node.ext, idx)}\n              </div>\n            </span>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Job;\n"]}