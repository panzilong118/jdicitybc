{"version":3,"sources":["../../components/table/SelectionBox.js"],"names":["React","SelectionBox","props","state","checked","getCheckState","unsubscribe","subscribe","store","setState","defaultSelection","rowIndex","selectionDirty","getState","selectedRowKeys","indexOf","type","rest","Component","propTypes"],"mappings":";;;;;;;;;;;AAAA;;IAAYA,K;;AAEZ;;;;AAEA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;IAEqBC,Y;;;AAGjB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,qBAAS,MAAKC,aAAL,CAAmBH,KAAnB;AADA,SAAb;AAGA,cAAKI,WAAL,GAAmB,YAAM,CAAE,CAA3B;AANe;AAOlB;;;;4CAEmB;AAChB,iBAAKC,SAAL;AACH;;;+CAEsB;AACnB,gBAAI,KAAKD,WAAT,EAAsB;AAClB,qBAAKA,WAAL;AACH;AACJ;;;oCAEW;AAAA;;AAAA,gBACAE,KADA,GACU,KAAKN,KADf,CACAM,KADA;;AAER,iBAAKF,WAAL,GAAmBE,MAAMD,SAAN,CAAgB,YAAM;AACrC,oBAAMH,UAAU,OAAKC,aAAL,CAAmB,OAAKH,KAAxB,CAAhB;AACA,uBAAKO,QAAL,CAAc,EAAEL,gBAAF,EAAd;AACH,aAHkB,CAAnB;AAIH;;;sCAEaF,K,EAAO;AAAA,gBACTM,KADS,GAC6BN,KAD7B,CACTM,KADS;AAAA,gBACFE,gBADE,GAC6BR,KAD7B,CACFQ,gBADE;AAAA,gBACgBC,QADhB,GAC6BT,KAD7B,CACgBS,QADhB;;AAEjB,gBAAIP,UAAU,KAAd;AACA,gBAAMQ,iBAAiBJ,SAASA,MAAMK,QAAN,EAAT,IAA6BL,MAAMK,QAAN,GAAiBD,cAA9C,IAAgE,EAAvF;AACA,gBAAME,kBAAkBN,SAASA,MAAMK,QAAN,EAAT,IAA6BL,MAAMK,QAAN,GAAiBC,eAA9C,IAAiE,EAAzF;;AAEA,gBAAIF,cAAJ,EAAoB;AAChBR,0BAAUU,gBAAgBC,OAAhB,CAAwBJ,QAAxB,KAAqC,CAA/C;AACH,aAFD,MAEO;AACHP,0BAAUU,gBAAgBC,OAAhB,CAAwBJ,QAAxB,KAAqC,CAArC,IAA0CD,iBAAiBK,OAAjB,CAAyBJ,QAAzB,KAAsC,CAAhF,IAAqF,KAA/F;AACH;AACD,mBAAOP,OAAP;AACH;;;iCAEQ;AAAA,yBAC+B,KAAKF,KADpC;AAAA,gBACGc,IADH,UACGA,IADH;AAAA,gBACSL,QADT,UACSA,QADT;AAAA,gBACsBM,IADtB;;AAAA,gBAEGb,OAFH,GAEe,KAAKD,KAFpB,CAEGC,OAFH;;;AAIL,gBAAIY,SAAS,OAAb,EAAsB;AAClB,uBACI;AACI,6BAASZ,OADb;AAEI,2BAAOO;AAFX,mBAGQM,IAHR,EADJ;AAOH,aARD,MAQO;AACH,uBACI;AACI,6BAASb;AADb,mBAEQa,IAFR,EADJ;AAMH;AACJ;;;;EAhEqCjB,MAAMkB,S;;AAA3BjB,Y,CACVkB,S;kBADUlB,Y","file":"SelectionBox.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Checkbox from '../checkbox';\r\n\r\nimport Radio from '../radio';\r\n\r\nimport { SelectionBoxProps } from './interface';\r\n\r\nexport default class SelectionBox extends React.Component {\r\n    static propTypes = {...SelectionBoxProps};\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            checked: this.getCheckState(props),\r\n        };\r\n        this.unsubscribe = () => {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.subscribe();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n        }\r\n    }\r\n\r\n    subscribe() {\r\n        const { store } = this.props;\r\n        this.unsubscribe = store.subscribe(() => {\r\n            const checked = this.getCheckState(this.props);\r\n            this.setState({ checked });\r\n        });\r\n    }\r\n\r\n    getCheckState(props) {\r\n        const { store, defaultSelection, rowIndex } = props;\r\n        let checked = false;\r\n        const selectionDirty = store && store.getState() && store.getState().selectionDirty || '';\r\n        const selectedRowKeys = store && store.getState() && store.getState().selectedRowKeys || '';\r\n        \r\n        if (selectionDirty) {\r\n            checked = selectedRowKeys.indexOf(rowIndex) >= 0;\r\n        } else {\r\n            checked = selectedRowKeys.indexOf(rowIndex) >= 0 || defaultSelection.indexOf(rowIndex) >= 0 || false;\r\n        }\r\n        return checked;\r\n    }\r\n\r\n    render() {\r\n        const { type, rowIndex, ...rest } = this.props;\r\n        const { checked } = this.state;\r\n\r\n        if (type === 'radio') {\r\n            return (\r\n                <Radio\r\n                    checked={checked}\r\n                    value={rowIndex}\r\n                    {...rest}\r\n                />\r\n            );\r\n        } else {\r\n            return (\r\n                <Checkbox\r\n                    checked={checked}\r\n                    {...rest}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n"]}