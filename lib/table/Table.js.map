{"version":3,"sources":["../../components/table/Table.js"],"names":["React","ReactDOM","noop","stopPropagation","e","nativeEvent","stopImmediatePropagation","defaultPagination","onChange","onShowSizeChange","emptyObject","Table","props","components","undefined","columns","children","createComponents","state","getDefaultSortOrder","filters","getFiltersFromColumns","pagination","getDefaultPagination","CheckboxPropsCache","store","selectedRowKeys","rowSelection","selectionDirty","getCheckboxProps","getFlatData","filter","item","rowIndex","getCheckboxPropsByItem","defaultChecked","map","record","getRecordKey","hasPagination","current","defaultCurrent","pageSize","defaultPageSize","nextProps","setState","newPagination","previousState","dataSource","getSortOrderColumns","length","sortState","getSortStateFromColumns","sortColumn","sortOrder","filteredValueColumns","getFilteredValueColumns","filtersFromColumns","newFilters","Object","keys","forEach","key","isFiltersChanged","selectWay","checked","changeRowKeys","data","selectedRows","row","i","indexOf","onSelect","onSelectAll","changeRows","onSelectInvert","filtersChanged","columnKey","column","filteredValue","col","colKey","getColumnKey","definedSortState","defaultSortedColumn","defaultSortOrder","sortedColumn","sorter","a","b","result","order","isSortColumn","newState","apply","prepareParamsArguments","locale","prefixCls","concat","getFlatCurrentPageData","index","disabled","selectionColumnClass","selections","selectionColumn","render","renderSelectionBox","type","className","fixed","width","columnWidth","checkboxAllDisabled","every","title","handleSelectRow","hideDefaultSelections","getPopupContainer","some","unshift","dataIndex","total","Math","floor","dropdownPrefixCls","originColumn","filterDropdown","sortButton","colFilters","handleFilter","isAscend","isDescend","toggleSortOrder","paginationPosition","size","position","getLocalData","handlePageChange","getMaxCurrent","handleShowSizeChange","field","myKey","c","Number","MAX_VALUE","_","getCurrentPageData","sorterFn","childrenColumnName","sort","recursiveSort","slice","getSorterFn","findColumn","values","onFilter","v","prevComponents","bodyRow","body","preBodyRow","style","loading","spinning","table","renderTable","paginationPatchClass","renderPagination","Component","Column","ColumnGroup","propTypes","array","string","useFixedHeader","bool","object","oneOfType","bordered","func","defaultProps","indentSize","rowKey","showHeader","onRow","custom","nextFilters","currentColumnKeys","push","filtersToSetState","handleSelect","target","defaultSelection","getState","getDefaultSelection","setSelectedRowKeys","handleRadioSelect","selectionKey","onSelectFunc","changeableRowKeys","splice","customSelectionStartIndex","otherArguments","handleChange","recordKey","findDOMNode","nextPagination","contextLocale","restProps","expandIconAsCell","expandedRowRender","classString","renderRowSelection","renderColumnsDropdown","newColumn","expandIconColumnIndex","emptyText"],"mappings":"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","file":"Table.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport RcTable from 'rc-table';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport Pagination from '../pagination';\r\n\r\nimport Icon from '../icon';\r\n\r\nimport Spin from '../spin';\r\n\r\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\r\n\r\nimport defaultLocale from '../locale-provider/default';\r\n\r\nimport warning from '../_util/warning';\r\n\r\nimport FilterDropdown from './filterDropdown';\r\n\r\nimport createStore, { Store } from './createStore';\r\n\r\nimport SelectionBox from './SelectionBox';\r\n\r\nimport SelectionCheckboxAll from './SelectionCheckboxAll';\r\n\r\nimport Column from './Column';\r\n\r\nimport ColumnGroup from './ColumnGroup';\r\n\r\nimport createBodyRow from './createBodyRow';\r\n\r\nimport { flatArray, treeMap, flatFilter, normalizeColumns } from './util';\r\n\r\nimport { TableProps } from './interface';\r\n\r\nfunction noop() {}\r\n\r\nfunction stopPropagation(e) {\r\n    e.stopPropagation();\r\n    if (e.nativeEvent.stopImmediatePropagation) {\r\n        e.nativeEvent.stopImmediatePropagation();\r\n    }\r\n}\r\n\r\nconst defaultPagination = {\r\n    onChange: noop,\r\n    onShowSizeChange: noop\r\n};\r\n\r\n/**\r\n * Avoid creating new object, so that parent component's shouldComponentUpdate\r\n * can works appropriately。\r\n */\r\nconst emptyObject = {};\r\n\r\nexport default class Table extends React.Component {\r\n    static Column = Column;\r\n    static ColumnGroup = ColumnGroup;\r\n\r\n    static propTypes = {\r\n        ...TableProps,\r\n        dataSource: PropTypes.array,\r\n        columns: PropTypes.array,\r\n        prefixCls: PropTypes.string,\r\n        useFixedHeader: PropTypes.bool,\r\n        rowSelection: PropTypes.object,\r\n        className: PropTypes.string,\r\n        size: PropTypes.string,\r\n        loading: PropTypes.oneOfType([\r\n            PropTypes.bool,\r\n            PropTypes.object\r\n        ]),\r\n        bordered: PropTypes.bool,\r\n        onChange: PropTypes.func,\r\n        locale: PropTypes.object,\r\n        dropdownPrefixCls: PropTypes.string,\r\n    };\r\n\r\n    static defaultProps = {\r\n        style: {},\r\n        dataSource: [],\r\n        prefixCls: 'jc-table',\r\n        useFixedHeader: false,\r\n        rowSelection: null,\r\n        className: '',\r\n        size: 'large',\r\n        loading: false,\r\n        bordered: false,\r\n        indentSize: 20,\r\n        locale: {},\r\n        rowKey: 'key',\r\n        showHeader: true\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        warning(\r\n            !('columnsPageRange' in props || 'columnsPageSize' in props),\r\n            '`columnsPageRange` and `columnsPageSize` are removed, please use ' +\r\n            'fixed columns instead, see: https://u.ant.design/fixed-columns.',\r\n        );\r\n        this.components = undefined;\r\n\r\n        this.columns = props.columns || normalizeColumns(props.children);\r\n\r\n        this.createComponents(props.components);\r\n\r\n        this.state = {\r\n            ...this.getDefaultSortOrder(this.columns),\r\n            // 减少状态\r\n            filters: this.getFiltersFromColumns(),\r\n            pagination: this.getDefaultPagination(props)\r\n        };\r\n\r\n        this.CheckboxPropsCache = {};\r\n\r\n        this.store = createStore({\r\n            selectedRowKeys: (props.rowSelection || {}).selectedRowKeys || [],\r\n            selectionDirty: false\r\n        });\r\n    }\r\n\r\n    getCheckboxPropsByItem = (item, index) => {\r\n        const { rowSelection = {} } = this.props;\r\n        if (!rowSelection.getCheckboxProps) {\r\n            return {};\r\n        }\r\n        const key = this.getRecordKey(item, index);\r\n        // Cache checkboxProps\r\n        if (!this.CheckboxPropsCache[key]) {\r\n            this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item);\r\n        }\r\n        return this.CheckboxPropsCache[key];\r\n    }\r\n\r\n    getDefaultSelection() {\r\n        const { rowSelection = {} } = this.props;\r\n        if (!rowSelection.getCheckboxProps) {\r\n            return [];\r\n        }\r\n        return this.getFlatData()\r\n            .filter((item, rowIndex) => this.getCheckboxPropsByItem(item, rowIndex).defaultChecked)\r\n            .map((record, rowIndex) => this.getRecordKey(record, rowIndex));\r\n    }\r\n\r\n    getDefaultPagination(props) {\r\n        const pagination = props.pagination || {};\r\n        return this.hasPagination(props) ?\r\n            {\r\n                ...defaultPagination,\r\n                ...pagination,\r\n                current: pagination.defaultCurrent || pagination.current || 1,\r\n                pageSize: pagination.defaultPageSize || pagination.pageSize || 10\r\n            } : {};\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.columns = nextProps.columns || normalizeColumns(nextProps.children);\r\n        if ('pagination' in nextProps || 'pagination' in this.props) {\r\n            this.setState(previousState => {\r\n                const newPagination = {\r\n                ...defaultPagination,\r\n                ...previousState.pagination,\r\n                ...nextProps.pagination,\r\n                };\r\n                newPagination.current = newPagination.current || 1;\r\n                newPagination.pageSize = newPagination.pageSize || 10;\r\n                return { pagination: nextProps.pagination !== false ? newPagination : emptyObject };\r\n            });\r\n        }\r\n        if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\r\n            this.store.setState({\r\n                selectedRowKeys: nextProps.rowSelection.selectedRowKeys || []\r\n            });\r\n            const { rowSelection } = this.props;\r\n            if (rowSelection && (nextProps.rowSelection.getCheckboxProps !== rowSelection.getCheckboxProps)) {\r\n                this.CheckboxPropsCache = {};\r\n            }\r\n        }\r\n        if ('dataSource' in nextProps && nextProps.dataSource !== this.props.dataSource) {\r\n            this.store.setState({\r\n                selectionDirty: false,\r\n            });\r\n            this.CheckboxPropsCache = {};\r\n        }\r\n\r\n        if (this.getSortOrderColumns(this.columns).length > 0) {\r\n            const sortState = this.getSortStateFromColumns(this.columns);\r\n            if (sortState.sortColumn !== this.state.sortColumn || sortState.sortOrder !== this.state.sortOrder) {\r\n                this.setState(sortState);\r\n            }\r\n        }\r\n\r\n        const filteredValueColumns = this.getFilteredValueColumns(this.columns);\r\n        if (filteredValueColumns.length > 0) {\r\n            const filtersFromColumns = this.getFiltersFromColumns(this.columns);\r\n            const newFilters = { ...this.state.filters };\r\n            Object.keys(filtersFromColumns).forEach(key => {\r\n                newFilters[key] = filtersFromColumns[key];\r\n            });\r\n            if (this.isFiltersChanged(newFilters)) {\r\n                this.setState({ filters: newFilters });\r\n            }\r\n        }\r\n\r\n        this.createComponents(nextProps.components, this.props.components);\r\n    }\r\n\r\n    onRow = (record, index) => {\r\n        const { onRow, prefixCls } = this.props;\r\n        const custom = onRow ? onRow(record, index) : {};\r\n        return {\r\n            ...custom,\r\n            prefixCls,\r\n            store: this.store,\r\n            rowKey: this.getRecordKey(record, index)\r\n        };\r\n    }\r\n\r\n    setSelectedRowKeys(selectedRowKeys, { selectWay, record, checked, changeRowKeys, nativeEvent }) {\r\n        const { rowSelection = {} } = this.props;\r\n        if (rowSelection && !('selectedRowKeys' in rowSelection)) {\r\n            this.store.setState({ selectedRowKeys });\r\n        }\r\n        const data = this.getFlatData();\r\n        if (!rowSelection.onChange && !rowSelection[selectWay]) {\r\n            return;\r\n        }\r\n        const selectedRows = data.filter(\r\n            (row, i) => selectedRowKeys.indexOf(this.getRecordKey(row, i)) >= 0,\r\n        );\r\n        if (rowSelection.onChange) {\r\n            rowSelection.onChange(selectedRowKeys, selectedRows);\r\n        }\r\n        if (selectWay === 'onSelect' && rowSelection.onSelect) {\r\n            rowSelection.onSelect(record, checked, selectedRows, nativeEvent);\r\n        } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {\r\n            const changeRows = data.filter(\r\n                (row, i) => changeRowKeys.indexOf(this.getRecordKey(row, i)) >= 0,\r\n            );\r\n            rowSelection.onSelectAll(checked, selectedRows, changeRows);\r\n        } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {\r\n            rowSelection.onSelectInvert(selectedRowKeys);\r\n        }\r\n    }\r\n\r\n    hasPagination(props) {\r\n        return (props || this.props).pagination !== false;\r\n    }\r\n\r\n    isFiltersChanged(filters) {\r\n        let filtersChanged = false;\r\n        if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {\r\n            filtersChanged = true;\r\n        } else {\r\n            Object.keys(filters).forEach(columnKey => {\r\n                if (filters[columnKey] !== this.state.filters[columnKey]) {\r\n                    filtersChanged = true;\r\n                }\r\n            });\r\n        }\r\n        return filtersChanged;\r\n    }\r\n\r\n    getSortOrderColumns(columns) {\r\n        return flatFilter(\r\n            columns || this.columns || [],\r\n            (column) => 'sortOrder' in column\r\n        );\r\n    }\r\n\r\n    getFilteredValueColumns(columns) {\r\n        return flatFilter(\r\n            columns || this.columns || [],\r\n            (column) => typeof column.filteredValue !== 'undefined'\r\n        );\r\n    }\r\n\r\n    getFiltersFromColumns(columns) {\r\n        let filters = {};\r\n        this.getFilteredValueColumns(columns).forEach((col) => {\r\n            const colKey = this.getColumnKey(col);\r\n            filters[colKey] = col.filteredValue;\r\n        });\r\n        return filters;\r\n    }\r\n\r\n    getDefaultSortOrder(columns) {\r\n        const definedSortState = this.getSortStateFromColumns(columns);\r\n\r\n        let defaultSortedColumn = flatFilter(columns || [], (column) => column.defaultSortOrder != null)[0];\r\n\r\n        if (defaultSortedColumn && !definedSortState.sortColumn) {\r\n            return {\r\n                sortColumn: defaultSortedColumn,\r\n                sortOrder: defaultSortedColumn.defaultSortOrder,\r\n            };\r\n        }\r\n\r\n        return definedSortState;\r\n    }\r\n\r\n    getSortStateFromColumns(columns) {\r\n        // return first column which sortOrder is not falsy\r\n        const sortedColumn = this.getSortOrderColumns(columns).filter((col) => col.sortOrder)[0];\r\n\r\n        if (sortedColumn) {\r\n            return {\r\n                sortColumn: sortedColumn,\r\n                sortOrder: sortedColumn.sortOrder,\r\n            };\r\n        }\r\n\r\n        return {\r\n            sortColumn: null,\r\n            sortOrder: null,\r\n        };\r\n    }\r\n\r\n    getSorterFn() {\r\n        const { sortOrder, sortColumn } = this.state;\r\n        if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {\r\n            return;\r\n        }\r\n\r\n        return (a, b) => {\r\n            const result = (sortColumn.sorter)(a, b);\r\n            if (result !== 0) {\r\n                return (sortOrder === 'descend') ? -result : result;\r\n            }\r\n            return 0;\r\n        };\r\n    }\r\n\r\n    toggleSortOrder(order, column) {\r\n        let { sortColumn, sortOrder } = this.state;\r\n        // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题\r\n        let isSortColumn = this.isSortColumn(column);\r\n        if (!isSortColumn) {  // 当前列未排序\r\n            sortOrder = order;\r\n            sortColumn = column;\r\n        } else {                      // 当前列已排序\r\n            if (sortOrder === order) {  // 切换为未排序状态\r\n                sortOrder = '';\r\n                sortColumn = null;\r\n            } else {                    // 切换为排序状态\r\n                sortOrder = order;\r\n            }\r\n        }\r\n        const newState = {\r\n            sortOrder,\r\n            sortColumn\r\n        };\r\n\r\n        // Controlled\r\n        if (this.getSortOrderColumns().length === 0) {\r\n            this.setState(newState);\r\n        }\r\n\r\n        const onChange = this.props.onChange;\r\n        if (onChange) {\r\n            onChange.apply(null, this.prepareParamsArguments({\r\n                ...this.state,\r\n                ...newState,\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleFilter = (column, nextFilters) => {\r\n        const props = this.props;\r\n        let pagination = { ...this.state.pagination };\r\n        const filters = {\r\n            ...this.state.filters,\r\n            [this.getColumnKey(column)]: nextFilters\r\n        };\r\n        // Remove filters not in current columns\r\n        const currentColumnKeys = [];\r\n        treeMap(this.columns, c => {\r\n            if (!c.children) {\r\n                currentColumnKeys.push(this.getColumnKey(c));\r\n            }\r\n        });\r\n        Object.keys(filters).forEach((columnKey) => {\r\n            if (currentColumnKeys.indexOf(columnKey) < 0) {\r\n                delete filters[columnKey];\r\n            }\r\n        });\r\n\r\n        if (props.pagination) {\r\n            // Reset current prop\r\n            pagination.current = 1;\r\n            pagination.onChange(pagination.current);\r\n        }\r\n\r\n        const newState = {\r\n            pagination,\r\n            filters: {}\r\n        };\r\n        const filtersToSetState = { ...filters };\r\n        // Remove filters which is controlled\r\n        this.getFilteredValueColumns().forEach((col) => {\r\n            const columnKey = this.getColumnKey(col);\r\n            if (columnKey) {\r\n                delete filtersToSetState[columnKey];\r\n            }\r\n        });\r\n        if (Object.keys(filtersToSetState).length > 0) {\r\n            newState.filters = filtersToSetState;\r\n        }\r\n\r\n        // Controlled current prop will not respond user interaction\r\n        if (typeof props.pagination === 'object' && 'current' in props.pagination) {\r\n            newState.pagination = {\r\n                ...pagination,\r\n                current: this.state.pagination.current,\r\n            };\r\n        }\r\n\r\n        this.setState(newState, () => {\r\n            this.store.setState({\r\n                selectionDirty: false\r\n            });\r\n            const onChange = this.props.onChange;\r\n            if (onChange) {\r\n                onChange.apply(null, this.prepareParamsArguments({\r\n                    ...this.state,\r\n                    selectionDirty: false,\r\n                    filters,\r\n                    pagination\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSelect = (record, rowIndex, e) => {\r\n        const checked = e.target.checked;\r\n        const nativeEvent = e.nativeEvent;\r\n        const defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();\r\n        let selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);\r\n        let key = this.getRecordKey(record, rowIndex);\r\n        if (checked) {\r\n            selectedRowKeys.push(this.getRecordKey(record, rowIndex));\r\n        } else {\r\n            selectedRowKeys = selectedRowKeys.filter((i) => key !== i);\r\n        }\r\n        this.store.setState({\r\n            selectionDirty: true,\r\n        });\r\n        this.setSelectedRowKeys(selectedRowKeys, {\r\n            selectWay: 'onSelect',\r\n            record,\r\n            checked,\r\n            changeRowKeys: [],\r\n            nativeEvent\r\n        });\r\n    }\r\n\r\n    handleRadioSelect = (record, rowIndex, e) => {\r\n        const checked = e.target.checked;\r\n        const nativeEvent = e.nativeEvent;\r\n        const defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();\r\n        let selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);\r\n        let key = this.getRecordKey(record, rowIndex);\r\n        selectedRowKeys = [key];\r\n        this.store.setState({\r\n            selectionDirty: true\r\n        });\r\n        this.setSelectedRowKeys(selectedRowKeys, {\r\n            selectWay: 'onSelect',\r\n            record,\r\n            checked,\r\n            changeRowKeys: [],\r\n            nativeEvent\r\n        });\r\n    }\r\n\r\n    handleSelectRow = (selectionKey, index, onSelectFunc) => {\r\n        const data = this.getFlatCurrentPageData();\r\n        const defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();\r\n        const selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);\r\n        const changeableRowKeys = data\r\n            .filter((item, i) => !this.getCheckboxPropsByItem(item, i).disabled)\r\n            .map((item, i) => this.getRecordKey(item, i));\r\n\r\n        let changeRowKeys = [];\r\n        let selectWay = '';\r\n        let checked;\r\n        // handle default selection\r\n        switch (selectionKey) {\r\n            case 'all':\r\n                changeableRowKeys.forEach(key => {\r\n                    if (selectedRowKeys.indexOf(key) < 0) {\r\n                        selectedRowKeys.push(key);\r\n                        changeRowKeys.push(key);\r\n                    }\r\n                });\r\n                selectWay = 'onSelectAll';\r\n                checked = true;\r\n                break;\r\n            case 'removeAll':\r\n                changeableRowKeys.forEach(key => {\r\n                    if (selectedRowKeys.indexOf(key) >= 0) {\r\n                        selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\r\n                        changeRowKeys.push(key);\r\n                    }\r\n                });\r\n                selectWay = 'onSelectAll';\r\n                checked = false;\r\n                break;\r\n            case 'invert':\r\n                changeableRowKeys.forEach(key => {\r\n                    if (selectedRowKeys.indexOf(key) < 0) {\r\n                        selectedRowKeys.push(key);\r\n                    } else {\r\n                        selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\r\n                    }\r\n                    changeRowKeys.push(key);\r\n                    selectWay = 'onSelectInvert';\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.store.setState({\r\n            selectionDirty: true,\r\n        });\r\n        // when select custom selection, callback selections[n].onSelect\r\n        const { rowSelection } = this.props;\r\n        let customSelectionStartIndex = 2;\r\n        if (rowSelection && rowSelection.hideDefaultSelections) {\r\n            customSelectionStartIndex = 0;\r\n        }\r\n        if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {\r\n            return onSelectFunc(changeableRowKeys);\r\n        }\r\n        this.setSelectedRowKeys(selectedRowKeys, {\r\n            selectWay: selectWay,\r\n            checked,\r\n            changeRowKeys\r\n        });\r\n    }\r\n\r\n    handlePageChange = (current, ...otherArguments) => {\r\n        const props = this.props;\r\n        let pagination = { ...this.state.pagination };\r\n        if (current) {\r\n            pagination.current = current;\r\n        } else {\r\n            pagination.current = pagination.current || 1;\r\n        }\r\n        pagination.onChange(pagination.current, ...otherArguments);\r\n\r\n        const newState = {\r\n            pagination\r\n        };\r\n        // Controlled current prop will not respond user interaction\r\n        if (props.pagination && typeof props.pagination === 'object' && 'current' in props.pagination) {\r\n            newState.pagination = {\r\n                ...pagination,\r\n                current: this.state.pagination.current,\r\n            };\r\n        }\r\n        this.setState(newState);\r\n\r\n        this.store.setState({\r\n            selectionDirty: false\r\n        });\r\n\r\n        const onChange = this.props.onChange;\r\n        if (onChange) {\r\n            onChange.apply(null, this.prepareParamsArguments({\r\n                ...this.state,\r\n                selectionDirty: false,\r\n                pagination,\r\n            }));\r\n        }\r\n    }\r\n\r\n    renderSelectionBox = (type) => {\r\n        return (_, record, index) => {\r\n            let rowIndex = this.getRecordKey(record, index); // 从 1 开始\r\n            const props = this.getCheckboxPropsByItem(record, index);\r\n            const handleChange = (e) => {\r\n                type === 'radio' ? this.handleRadioSelect(record, rowIndex, e) : this.handleSelect(record, rowIndex, e);\r\n            };\r\n\r\n            return (\r\n                <span onClick={stopPropagation}>\r\n                    <SelectionBox\r\n                        type={type}\r\n                        store={this.store}\r\n                        rowIndex={rowIndex}\r\n                        onChange={handleChange}\r\n                        defaultSelection={this.getDefaultSelection()}\r\n                        {...props}\r\n                    />\r\n                </span>\r\n            );\r\n        };\r\n    }\r\n\r\n    getRecordKey = (record, index) => {\r\n        const rowKey = this.props.rowKey;\r\n        const recordKey = (typeof rowKey === 'function') ? rowKey(record, index) : record[rowKey];\r\n        warning(recordKey !== undefined,\r\n            'Each record in dataSource of table should have a unique `key` prop, or set `rowKey` to an unique primary key,' +\r\n            'see https://u.ant.design/table-row-key',\r\n        );\r\n        return recordKey === undefined ? index : recordKey;\r\n    }\r\n\r\n    getPopupContainer = () => {\r\n        return ReactDOM.findDOMNode(this);\r\n    }\r\n\r\n    renderRowSelection(locale) {\r\n        const { prefixCls, rowSelection } = this.props;\r\n        const columns = this.columns.concat();\r\n        if (rowSelection) {\r\n            const data = this.getFlatCurrentPageData().filter((item, index) => {\r\n                if (rowSelection.getCheckboxProps) {\r\n                    return !this.getCheckboxPropsByItem(item, index).disabled;\r\n                }\r\n                return true;\r\n            });\r\n            let selectionColumnClass = classNames(`${prefixCls}-selection-column`, {\r\n                [`${prefixCls}-selection-column-custom`]: rowSelection.selections,\r\n            });\r\n            const selectionColumn = {\r\n                key: 'selection-column',\r\n                render: this.renderSelectionBox(rowSelection.type),\r\n                className: selectionColumnClass,\r\n                fixed: rowSelection.fixed,\r\n                width: rowSelection.columnWidth,\r\n            };\r\n            if (rowSelection.type !== 'radio') {\r\n                const checkboxAllDisabled = data.every((item, index) => this.getCheckboxPropsByItem(item, index).disabled);\r\n                selectionColumn.title = (\r\n                    <SelectionCheckboxAll\r\n                        store={this.store}\r\n                        locale={locale}\r\n                        data={data}\r\n                        getCheckboxPropsByItem={this.getCheckboxPropsByItem}\r\n                        getRecordKey={this.getRecordKey}\r\n                        disabled={checkboxAllDisabled}\r\n                        prefixCls={prefixCls}\r\n                        onSelect={this.handleSelectRow}\r\n                        selections={rowSelection.selections}\r\n                        hideDefaultSelections={rowSelection.hideDefaultSelections}\r\n                        getPopupContainer={this.getPopupContainer}\r\n                    />\r\n                );\r\n            }\r\n            if ('fixed' in rowSelection) {\r\n                selectionColumn.fixed = rowSelection.fixed;\r\n            } else if (columns.some(column => column.fixed === 'left' || column.fixed === true)) {\r\n                selectionColumn.fixed = 'left';\r\n            }\r\n            if (columns[0] && columns[0].key === 'selection-column') {\r\n                columns[0] = selectionColumn;\r\n            } else {\r\n                columns.unshift(selectionColumn);\r\n            }\r\n        }\r\n        return columns;\r\n    }\r\n\r\n    getColumnKey(column, index) {\r\n        return column.key || column.dataIndex || index;\r\n    }\r\n\r\n    getMaxCurrent(total) {\r\n        const { current, pageSize } = this.state.pagination;\r\n        if ((current - 1) * pageSize >= total) {\r\n            return Math.floor((total - 1) / pageSize) + 1;\r\n        }\r\n        return current;\r\n    }\r\n\r\n    isSortColumn(column) {\r\n        const { sortColumn } = this.state;\r\n        if (!column || !sortColumn) {\r\n            return false;\r\n        }\r\n        return this.getColumnKey(sortColumn) === this.getColumnKey(column);\r\n    }\r\n\r\n    renderColumnsDropdown(columns, locale) {\r\n        const { prefixCls, dropdownPrefixCls } = this.props;\r\n        const { sortOrder } = this.state;\r\n        return treeMap(columns, (originColumn, i) => {\r\n            let column = { ...originColumn };\r\n            let key = this.getColumnKey(column, i);\r\n            let filterDropdown;\r\n            let sortButton;\r\n            if ((column.filters && column.filters.length > 0) || column.filterDropdown) {\r\n                let colFilters = this.state.filters[key] || [];\r\n                filterDropdown = (\r\n                    <FilterDropdown\r\n                        locale={locale}\r\n                        column={column}\r\n                        selectedKeys={colFilters}\r\n                        confirmFilter={this.handleFilter}\r\n                        prefixCls={`${prefixCls}-filter`}\r\n                        dropdownPrefixCls={dropdownPrefixCls || 'jc-dropdown'}\r\n                        getPopupContainer={this.getPopupContainer}\r\n                    />\r\n                );\r\n            }\r\n            if (column.sorter) {\r\n                let isSortColumn = this.isSortColumn(column);\r\n                if (isSortColumn) {\r\n                    column.className = classNames(column.className, {\r\n                        [`${prefixCls}-column-sort`]: sortOrder,\r\n                    });\r\n                }\r\n                const isAscend = isSortColumn && sortOrder === 'ascend';\r\n                const isDescend = isSortColumn && sortOrder === 'descend';\r\n                sortButton = (\r\n                    <div className={`${prefixCls}-column-sorter`}>\r\n                        <span\r\n                        className={`${prefixCls}-column-sorter-up ${isAscend ? 'on' : 'off'}`}\r\n                        title=\"↑\"\r\n                        onClick={() => this.toggleSortOrder('ascend', column)}\r\n                        >\r\n                        <Icon type=\"caret-up\" />\r\n                        </span>\r\n                        <span\r\n                        className={`${prefixCls}-column-sorter-down ${isDescend ? 'on' : 'off'}`}\r\n                        title=\"↓\"\r\n                        onClick={() => this.toggleSortOrder('descend', column)}\r\n                        >\r\n                        <Icon type=\"caret-down\" />\r\n                        </span>\r\n                    </div>\r\n                );\r\n            }\r\n            column.title = (\r\n                <span key={key}>\r\n                    {column.title}\r\n                    {sortButton}\r\n                    {filterDropdown}\r\n                </span>\r\n            );\r\n\r\n            if (sortButton || filterDropdown) {\r\n                column.className = classNames(`${prefixCls}-column-has-filters`, column.className);\r\n            }\r\n\r\n            return column;\r\n        });\r\n    }\r\n\r\n    handleShowSizeChange = (current, pageSize) => {\r\n        const pagination = this.state.pagination;\r\n        pagination.onShowSizeChange(current, pageSize);\r\n        const nextPagination = {\r\n            ...pagination,\r\n            pageSize,\r\n            current\r\n        };\r\n        this.setState({ pagination: nextPagination });\r\n\r\n        const onChange = this.props.onChange;\r\n        if (onChange) {\r\n            onChange.apply(null, this.prepareParamsArguments({\r\n                ...this.state,\r\n                pagination: nextPagination\r\n            }));\r\n        }\r\n    }\r\n\r\n    renderPagination(paginationPosition) {\r\n        // 强制不需要分页\r\n        if (!this.hasPagination()) {\r\n            return null;\r\n        }\r\n        let size = 'default';\r\n        const { pagination } = this.state;\r\n        if (pagination.size) {\r\n            size = pagination.size;\r\n        } else if (this.props.size === 'middle' || this.props.size === 'small') {\r\n            size = 'small';\r\n        }\r\n        let position = pagination.position || 'bottom';\r\n        let total = pagination.total || this.getLocalData().length;\r\n        return (total > 0 && (position === paginationPosition || position === 'both')) ? (\r\n            <Pagination\r\n                key={`pagination-${paginationPosition}`}\r\n                {...pagination}\r\n                className={classNames(pagination.className, `${this.props.prefixCls}-pagination`)}\r\n                onChange={this.handlePageChange}\r\n                total={total}\r\n                size={size}\r\n                current={this.getMaxCurrent(total)}\r\n                onShowSizeChange={this.handleShowSizeChange}\r\n            />\r\n        ) : null;\r\n    }\r\n\r\n    // Get pagination, filters, sorter\r\n    prepareParamsArguments(state) {\r\n        const pagination = { ...state.pagination };\r\n        // remove useless handle function in Table.onChange\r\n        delete pagination.onChange;\r\n        delete pagination.onShowSizeChange;\r\n        const filters = state.filters;\r\n        const sorter = {};\r\n        if (state.sortColumn && state.sortOrder) {\r\n            sorter.column = state.sortColumn;\r\n            sorter.order = state.sortOrder;\r\n            sorter.field = state.sortColumn.dataIndex;\r\n            sorter.columnKey = this.getColumnKey(state.sortColumn);\r\n        }\r\n        return [pagination, filters, sorter];\r\n    }\r\n\r\n    findColumn(myKey) {\r\n        let column;\r\n        treeMap(this.columns, c => {\r\n            if (this.getColumnKey(c) === myKey) {\r\n                column = c;\r\n            }\r\n        });\r\n        return column;\r\n    }\r\n\r\n    getCurrentPageData() {\r\n        let data = this.getLocalData();\r\n        let current;\r\n        let pageSize;\r\n        let state = this.state;\r\n        // 如果没有分页的话，默认全部展示\r\n        if (!this.hasPagination()) {\r\n            pageSize = Number.MAX_VALUE;\r\n            current = 1;\r\n        } else {\r\n            pageSize = state.pagination.pageSize;\r\n            current = this.getMaxCurrent(state.pagination.total || data.length);\r\n        }\r\n\r\n        // 分页\r\n        // ---\r\n        // 当数据量少于等于每页数量时，直接设置数据\r\n        // 否则进行读取分页数据\r\n        if (data.length > pageSize || pageSize === Number.MAX_VALUE) {\r\n            data = data.filter((_, i) => {\r\n                return i >= (current - 1) * pageSize && i < current * pageSize;\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    getFlatData() {\r\n        return flatArray(this.getLocalData());\r\n    }\r\n\r\n    getFlatCurrentPageData() {\r\n        return flatArray(this.getCurrentPageData());\r\n    }\r\n\r\n    recursiveSort(data, sorterFn) {\r\n        const { childrenColumnName = 'children' } = this.props;\r\n        return data.sort(sorterFn).map((item) => (item[childrenColumnName] ? {\r\n            ...item,\r\n            [childrenColumnName]: this.recursiveSort(item[childrenColumnName], sorterFn),\r\n        } : item));\r\n    }\r\n\r\n    getLocalData() {\r\n        const state = this.state;\r\n        const { dataSource } = this.props;\r\n        let data = dataSource || [];\r\n        // 优化本地排序\r\n        data = data.slice(0);\r\n        const sorterFn = this.getSorterFn();\r\n        if (sorterFn) {\r\n            data = this.recursiveSort(data, sorterFn);\r\n        }\r\n        // 筛选\r\n        if (state.filters) {\r\n            Object.keys(state.filters).forEach((columnKey) => {\r\n                let col = this.findColumn(columnKey);\r\n                if (!col) {\r\n                    return;\r\n                }\r\n                let values = state.filters[columnKey] || [];\r\n                if (values.length === 0) {\r\n                    return;\r\n                }\r\n                const onFilter = col.onFilter;\r\n                data = onFilter ? data.filter(record => {\r\n                    return values.some(v => onFilter(v, record));\r\n                }) : data;\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    createComponents(components = {}, prevComponents) {\r\n        const bodyRow = components && components.body && components.body.row;\r\n        const preBodyRow = prevComponents && prevComponents.body && prevComponents.body.row;\r\n        if (!this.components || bodyRow !== preBodyRow) {\r\n            this.components = { ...components };\r\n            this.components.body = {\r\n                ...components.body,\r\n                row: createBodyRow(bodyRow),\r\n            };\r\n        }\r\n    }\r\n\r\n    renderTable = (contextLocale, loading) => {\r\n        const locale = { ...contextLocale, ...this.props.locale };\r\n        const { style, className, prefixCls, showHeader, ...restProps } = this.props;\r\n        const data = this.getCurrentPageData();\r\n        const expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;\r\n\r\n        const classString = classNames({\r\n            [`${prefixCls}-${this.props.size}`]: true,\r\n            [`${prefixCls}-bordered`]: this.props.bordered,\r\n            [`${prefixCls}-empty`]: !data.length,\r\n            [`${prefixCls}-without-column-header`]: !showHeader\r\n        });\r\n\r\n        let columns = this.renderRowSelection(locale);\r\n        columns = this.renderColumnsDropdown(columns, locale);\r\n        columns = columns.map((column, i) => {\r\n            const newColumn = { ...column };\r\n            newColumn.key = this.getColumnKey(newColumn, i);\r\n            return newColumn;\r\n        });\r\n        let expandIconColumnIndex = (columns[0] && columns[0].key === 'selection-column') ? 1 : 0;\r\n        if ('expandIconColumnIndex' in restProps) {\r\n            expandIconColumnIndex = restProps.expandIconColumnIndex;\r\n        }\r\n\r\n        return (\r\n            <RcTable\r\n                key=\"table\"\r\n                {...restProps}\r\n                onRow={this.onRow}\r\n                components={this.components}\r\n                prefixCls={prefixCls}\r\n                data={data}\r\n                columns={columns}\r\n                showHeader={showHeader}\r\n                className={classString}\r\n                expandIconColumnIndex={expandIconColumnIndex}\r\n                expandIconAsCell={expandIconAsCell}\r\n                emptyText={!loading.spinning && locale.emptyText}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { style, className, prefixCls } = this.props;\r\n        const data = this.getCurrentPageData();\r\n\r\n        let loading = this.props.loading;\r\n        if (typeof loading === 'boolean') {\r\n            loading = {\r\n                spinning: loading,\r\n            };\r\n        }\r\n\r\n        const table = (\r\n            <LocaleReceiver\r\n                componentName=\"Table\"\r\n                defaultLocale={defaultLocale.Table}\r\n            >\r\n                {(locale) => this.renderTable(locale, loading)}\r\n            </LocaleReceiver>\r\n        );\r\n\r\n        // if there is no pagination or no data,\r\n        // the height of spin should decrease by half of pagination\r\n        const paginationPatchClass = (this.hasPagination() && data && data.length !== 0)\r\n        ? `${prefixCls}-with-pagination` : `${prefixCls}-without-pagination`;\r\n\r\n        return (\r\n            <div className={classNames(`${prefixCls}-wrapper`, className)} style={style} >\r\n                <Spin\r\n                    {...loading}\r\n                    className={loading.spinning ? `${paginationPatchClass} ${prefixCls}-spin-holder` : ''}\r\n                >\r\n                    {this.renderPagination('top')}\r\n                    {table}\r\n                    {this.renderPagination('bottom')}\r\n                </Spin>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}