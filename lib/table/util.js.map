{"version":3,"sources":["../../components/table/util.js"],"names":["flatArray","treeMap","flatFilter","normalizeColumns","React","data","childrenName","result","loop","array","forEach","item","newItem","push","length","tree","mapper","map","node","index","extra","callback","reduce","acc","children","elements","columns","Children","element","isValidElement","column","props","key","type","__JC_TABLE_COLUMN_GROUP"],"mappings":";;;;;;;;QAEgBA,S,GAAAA,S;QAoBAC,O,GAAAA,O;QAaAC,U,GAAAA,U;QAaAC,gB,GAAAA,gB;;AAhDhB;;IAAYC,K;;;;;;AAEL,SAASJ,SAAT,GAAyD;AAAA,QAAtCK,IAAsC,uEAA/B,EAA+B;AAAA,QAA3BC,YAA2B,uEAAZ,UAAY;;AAC5D,QAAMC,SAAS,EAAf;AACA,QAAMC,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAW;AACpBA,cAAMC,OAAN,CAAc,gBAAQ;AAClB,gBAAIC,KAAKL,YAAL,CAAJ,EAAwB;AACpB,oBAAMM,uBAAeD,IAAf,CAAN;AACA,uBAAOC,QAAQN,YAAR,CAAP;AACAC,uBAAOM,IAAP,CAAYD,OAAZ;AACA,oBAAID,KAAKL,YAAL,EAAmBQ,MAAnB,GAA4B,CAAhC,EAAmC;AACnCN,yBAAKG,KAAKL,YAAL,CAAL;AACC;AACJ,aAPD,MAOO;AACHC,uBAAOM,IAAP,CAAYF,IAAZ;AACH;AACJ,SAXD;AAYH,KAbD;AAcAH,SAAKH,IAAL;AACA,WAAOE,MAAP;AACH;;AAEM,SAASN,OAAT,GAA+D;AAAA,QAA9Cc,IAA8C,uEAAvC,EAAuC;AAAA,QAAnCC,MAAmC;AAAA,QAA3BV,YAA2B,uEAAZ,UAAY;;AAClE,WAAOS,KAAKE,GAAL,CAAS,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC7B,YAAMC,QAAQ,EAAd;AACA,YAAIF,KAAKZ,YAAL,CAAJ,EAAwB;AACpBc,kBAAMd,YAAN,IAAsBL,QAAQiB,KAAKZ,YAAL,CAAR,EAA4BU,MAA5B,EAAoCV,YAApC,CAAtB;AACH;AACD,4BACOU,OAAOE,IAAP,EAAaC,KAAb,CADP,EAEOC,KAFP;AAIH,KATM,CAAP;AAUH;;AAEM,SAASlB,UAAT,GAAyC;AAAA,QAArBa,IAAqB,uEAAd,EAAc;AAAA,QAAVM,QAAU;;AAC5C,WAAON,KAAKO,MAAL,CAAY,UAACC,GAAD,EAAML,IAAN,EAAe;AAC9B,YAAIG,SAASH,IAAT,CAAJ,EAAoB;AAChBK,gBAAIV,IAAJ,CAASK,IAAT;AACH;AACD,YAAIA,KAAKM,QAAT,EAAmB;AACf,gBAAMA,WAAWtB,WAAWgB,KAAKM,QAAhB,EAA0BH,QAA1B,CAAjB;AACAE,gBAAIV,IAAJ,+BAAYW,QAAZ;AACH;AACD,eAAOD,GAAP;AACH,KATM,EASJ,EATI,CAAP;AAUH;;AAEM,SAASpB,gBAAT,CAA0BsB,QAA1B,EAAoC;AACvC,QAAMC,UAAU,EAAhB;AACAtB,UAAMuB,QAAN,CAAejB,OAAf,CAAuBe,QAAvB,EAAiC,UAACG,OAAD,EAAa;AAC1C,YAAI,CAACxB,MAAMyB,cAAN,CAAqBD,OAArB,CAAL,EAAoC;AAChC;AACH;AACD,YAAME,sBACCF,QAAQG,KADT,CAAN;AAGA,YAAIH,QAAQI,GAAZ,EAAiB;AACbF,mBAAOE,GAAP,GAAaJ,QAAQI,GAArB;AACH;AACD,YAAIJ,QAAQK,IAAR,IAAiBL,QAAQK,IAAT,CAAeC,uBAAnC,EAA4D;AACxDJ,mBAAON,QAAP,GAAkBrB,iBAAiB2B,OAAON,QAAxB,CAAlB;AACH;AACDE,gBAAQb,IAAR,CAAaiB,MAAb;AACH,KAdD;AAeA,WAAOJ,OAAP;AACH","file":"util.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport function flatArray(data = [], childrenName = 'children') {\r\n    const result = [];\r\n    const loop = (array) => {\r\n        array.forEach(item => {\r\n            if (item[childrenName]) {\r\n                const newItem = { ...item };\r\n                delete newItem[childrenName];\r\n                result.push(newItem);\r\n                if (item[childrenName].length > 0) {\r\n                loop(item[childrenName]);\r\n                }\r\n            } else {\r\n                result.push(item);\r\n            }\r\n        });\r\n    };\r\n    loop(data);\r\n    return result;\r\n}\r\n\r\nexport function treeMap(tree = [], mapper, childrenName = 'children') {\r\n    return tree.map((node, index) => {\r\n        const extra = {};\r\n        if (node[childrenName]) {\r\n            extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\r\n        }\r\n        return {\r\n            ...mapper(node, index),\r\n            ...extra\r\n        };\r\n    });\r\n}\r\n\r\nexport function flatFilter(tree = [], callback) {\r\n    return tree.reduce((acc, node) => {\r\n        if (callback(node)) {\r\n            acc.push(node);\r\n        }\r\n        if (node.children) {\r\n            const children = flatFilter(node.children, callback);\r\n            acc.push(...children);\r\n        }\r\n        return acc;\r\n    }, []);\r\n}\r\n\r\nexport function normalizeColumns(elements) {\r\n    const columns = [];\r\n    React.Children.forEach(elements, (element) => {\r\n        if (!React.isValidElement(element)) {\r\n            return;\r\n        }\r\n        const column = {\r\n            ...element.props,\r\n        };\r\n        if (element.key) {\r\n            column.key = element.key;\r\n        }\r\n        if (element.type && (element.type).__JC_TABLE_COLUMN_GROUP) {\r\n            column.children = normalizeColumns(column.children);\r\n        }\r\n        columns.push(column);\r\n    });\r\n    return columns;\r\n}\r\n"]}