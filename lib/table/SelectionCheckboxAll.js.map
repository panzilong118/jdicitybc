{"version":3,"sources":["../../components/table/SelectionCheckboxAll.js"],"names":["React","SelectionCheckboxAll","props","handleSelectAllChagne","e","checked","target","onSelect","defaultSelections","hideDefaultSelections","key","text","locale","selectAll","selectInvert","unsubscribe","state","getCheckState","indeterminate","getIndeterminateState","subscribe","nextProps","setCheckState","store","data","type","byDefaultChecked","getCheckboxPropsByItem","getRecordKey","item","i","defaultChecked","getState","selectedRowKeys","indexOf","setState","length","selectionDirty","checkSelection","selections","map","selection","index","disabled","prefixCls","getPopupContainer","selectionPrefixCls","customSelections","newSelections","Array","isArray","concat","menu","renderMenus","Component","propTypes"],"mappings":"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","file":"SelectionCheckboxAll.js","sourcesContent":["import * as React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Checkbox from '../checkbox';\n\nimport Dropdown from '../dropdown';\n\nimport Menu from '../menu';\n\nimport Icon from '../icon';\n\nimport classNames from 'classnames';\n\nimport { SelectionCheckboxAllProps } from './interface';\n\nexport default class SelectionCheckboxAll<T> extends React.Component {\n\n    static propTypes = {...SelectionCheckboxAllProps};\n\n    constructor(props) {\n        super(props);\n\n        this.defaultSelections = props.hideDefaultSelections ? [] : [{\n            key: 'all',\n            text: props.locale.selectAll,\n            onSelect: () => {},\n        }, {\n            key: 'invert',\n            text: props.locale.selectInvert,\n            onSelect: () => {},\n        }];\n\n        this.unsubscribe = () => {};\n\n        this.state = {\n            checked: this.getCheckState(props),\n            indeterminate: this.getIndeterminateState(props)\n        };\n    }\n\n    componentDidMount() {\n        this.subscribe();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setCheckState(nextProps);\n    }\n\n    componentWillUnmount() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n    }\n\n    subscribe() {\n        const { store } = this.props;\n        this.unsubscribe = store.subscribe(() => {\n            this.setCheckState(this.props);\n        });\n    }\n\n    checkSelection(data, type, byDefaultChecked) {\n        const { store, getCheckboxPropsByItem, getRecordKey } = this.props;\n        // type should be 'every' | 'some'\n        if (type === 'every' || type === 'some') {\n            return (\n                byDefaultChecked\n                ? data[type]((item, i) => getCheckboxPropsByItem(item, i).defaultChecked)\n                : data[type]((item, i) => store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0)\n            );\n        }\n        return false;\n    }\n\n    setCheckState(props) {\n        const checked = this.getCheckState(props);\n        const indeterminate = this.getIndeterminateState(props);\n        if (checked !== this.state.checked) {\n            this.setState({ checked });\n        }\n        if (indeterminate !== this.state.indeterminate) {\n            this.setState({ indeterminate });\n        }\n    }\n\n    getCheckState(props) {\n        const { store, data } = props;\n        let checked;\n        if (!data.length) {\n            checked = false;\n        } else {\n            checked = store.getState().selectionDirty ? this.checkSelection(data, 'every', false)\n                : (this.checkSelection(data, 'every', false) || this.checkSelection(data, 'every', true));\n        }\n        return checked;\n    }\n\n    getIndeterminateState(props) {\n        const { store, data } = props;\n        let indeterminate;\n        if (!data.length) {\n            indeterminate = false;\n        } else {\n        indeterminate = store.getState().selectionDirty\n            ? (this.checkSelection(data, 'some', false) && !this.checkSelection(data, 'every', false))\n            : ((this.checkSelection(data, 'some', false) && !this.checkSelection(data, 'every', false)) ||\n                (this.checkSelection(data, 'some', true) && !this.checkSelection(data, 'every', true))\n            );\n        }\n        return indeterminate;\n    }\n\n    handleSelectAllChagne = (e) => {\n        let checked = e.target.checked;\n        this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);\n    }\n\n    renderMenus(selections=[]) {\n        return selections.map((selection, index) => {\n            return (\n                <Menu.Item key={selection.key || index} >\n                    <div onClick={() => {this.props.onSelect(selection.key, index, selection.onSelect); }} >\n                        {selection.text}\n                    </div>\n                </Menu.Item>\n            );\n        });\n    }\n\n    render() {\n        const { disabled, prefixCls, selections, getPopupContainer } = this.props;\n        const { checked, indeterminate } = this.state;\n\n        let selectionPrefixCls = `${prefixCls}-selection`;\n\n        let customSelections = null;\n\n        if (selections) {\n            let newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections) : this.defaultSelections;\n\n        const menu = (\n            <Menu className={`${selectionPrefixCls}-menu`} selectedKeys={[]} >\n                {this.renderMenus(newSelections)}\n            </Menu>\n        );\n\n        customSelections = newSelections.length > 0 ? (\n            <Dropdown overlay={menu} getPopupContainer={getPopupContainer} >\n                <div className={`${selectionPrefixCls}-down`}>\n                    <Icon type=\"down\" />\n                </div>\n            </Dropdown>\n            ) : null;\n        }\n\n        return (\n            <div className={selectionPrefixCls}>\n                <Checkbox\n                    className={classNames({ [`${selectionPrefixCls}-select-all-custom`]: customSelections })}\n                    checked={checked}\n                    indeterminate={indeterminate}\n                    disabled={disabled}\n                    onChange={this.handleSelectAllChagne}\n                />\n                {customSelections}\n            </div>\n        );\n    }\n}\n"]}