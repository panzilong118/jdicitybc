{"version":3,"sources":["../../components/table/filterDropdown.js"],"names":["React","ReactDOM","FilterMenu","props","visible","column","filterDropdownVisible","state","selectedKeys","keyPathOfSelectedItem","neverShown","setNeverShown","nextProps","newState","Object","keys","length","setState","onFilterDropdownVisibleChange","confirmFilter","item","multiple","filterMultiple","input","indexOf","value","toString","text","filters","some","children","items","map","containSelected","key","subMenuCls","dropdownPrefixCls","renderMenus","renderMenuItem","locale","prefixCls","getPopupContainer","dropdownMenuClass","hasSubMenu","menus","filterDropdown","handleMenuItemClick","setSelectedKeys","triggerNode","parentNode","handleConfirm","filterConfirm","handleClearFilters","filterReset","onVisibleChange","renderFilterIcon","Component","propTypes","defaultProps","handleFilter","rootNode","findDOMNode","filterBelongToScrollBody","fixed","setVisible","info","keyPath","filterIcon","dropdownSelectedClass","cloneElement","title","filterTitle","className"],"mappings":"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","file":"filterDropdown.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\r\n\r\nimport closest from 'dom-closest';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport Dropdown from '../dropdown';\r\n\r\nimport Icon from '../icon';\r\n\r\nimport Checkbox from '../checkbox';\r\n\r\nimport Radio from '../radio';\r\n\r\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\r\n\r\nimport { FilterMenuProps } from './interface';\r\n\r\nexport default class FilterMenu extends React.Component {\r\n    static propTypes = {...FilterMenuProps};\r\n\r\n    static defaultProps = {\r\n        handleFilter: () => {},\r\n        column: {}\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const visible = ('filterDropdownVisible' in props.column) ? props.column.filterDropdownVisible : false;\r\n\r\n        \r\n        this.state = {\r\n            selectedKeys: props.selectedKeys,\r\n            keyPathOfSelectedItem: {},    // 记录所有有选中子菜单的祖先菜单\r\n            visible,\r\n        };\r\n\r\n        this.neverShown = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { column } = this.props;\r\n        this.setNeverShown(column);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { column } = nextProps;\r\n        this.setNeverShown(column);\r\n        const newState = {\r\n            selectedKeys: [],\r\n            visible: false\r\n        };\r\n        if ('selectedKeys' in nextProps) {\r\n            newState.selectedKeys = nextProps.selectedKeys;\r\n        }\r\n        if ('filterDropdownVisible' in column) {\r\n            newState.visible = column.filterDropdownVisible;\r\n        }\r\n        if (Object.keys(newState).length > 0) {\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    setNeverShown = (column) => {\r\n        const rootNode = ReactDOM.findDOMNode(this);\r\n        const filterBelongToScrollBody = !!closest(rootNode, `.jc-table-scroll`);\r\n        if (filterBelongToScrollBody) {\r\n            // When fixed column have filters, there will be two dropdown menus\r\n            // Filter dropdown menu inside scroll body should never be shown\r\n            // To fix https://github.com/ant-design/ant-design/issues/5010 and\r\n            // https://github.com/ant-design/ant-design/issues/7909\r\n            this.neverShown = !!column.fixed;\r\n        }\r\n    }\r\n\r\n    setSelectedKeys = ({ selectedKeys }) => {\r\n        this.setState({ selectedKeys });\r\n    }\r\n\r\n    setVisible(visible) {\r\n        const { column } = this.props;\r\n        if (!('filterDropdownVisible' in column)) {\r\n            this.setState({ visible });\r\n        }\r\n        if (column.onFilterDropdownVisibleChange) {\r\n            column.onFilterDropdownVisibleChange(visible);\r\n        }\r\n    }\r\n\r\n    handleClearFilters = () => {\r\n        this.setState({\r\n            selectedKeys: []\r\n        }, this.handleConfirm);\r\n    }\r\n\r\n    handleConfirm = () => {\r\n        this.setVisible(false);\r\n        this.confirmFilter();\r\n    }\r\n\r\n    onVisibleChange = (visible) => {\r\n        this.setVisible(visible);\r\n        if (!visible) {\r\n            this.confirmFilter();\r\n        }\r\n    }\r\n\r\n    confirmFilter() {\r\n        if (this.state.selectedKeys !== this.props.selectedKeys) {\r\n            this.props.confirmFilter(this.props.column, this.state.selectedKeys);\r\n        }\r\n    }\r\n\r\n    renderMenuItem(item) {\r\n        const { column } = this.props;\r\n        const multiple = ('filterMultiple' in column) ? column.filterMultiple : true;\r\n        const input = multiple ? (\r\n            <Checkbox checked={this.state.selectedKeys.indexOf(item.value.toString()) >= 0} />\r\n        ) : (\r\n            <Radio checked={this.state.selectedKeys.indexOf(item.value.toString()) >= 0} />\r\n        );\r\n\r\n        return (\r\n            <MenuItem key={item.value}>\r\n                {input}\r\n                <span>{item.text}</span>\r\n            </MenuItem>\r\n        );\r\n    }\r\n\r\n    hasSubMenu() {\r\n        const { column: { filters = [] } } = this.props;\r\n        return filters.some(item => !!(item.children && item.children.length > 0));\r\n    }\r\n\r\n    renderMenus(items) {\r\n        return items.map(item => {\r\n            if (item.children && item.children.length > 0) {\r\n                const { keyPathOfSelectedItem } = this.state;\r\n                const containSelected = Object.keys(keyPathOfSelectedItem).some(\r\n                    key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0,\r\n                );\r\n                const subMenuCls = containSelected ? `${this.props.dropdownPrefixCls}-submenu-contain-selected` : '';\r\n                return (\r\n                    <SubMenu title={item.text} className={subMenuCls} key={item.value.toString()}>\r\n                        {this.renderMenus(item.children)}\r\n                    </SubMenu>\r\n                );\r\n            }\r\n            return this.renderMenuItem(item);\r\n        });\r\n    }\r\n\r\n    handleMenuItemClick = (info = { keyPath: '', key: '' }) => {\r\n        if (info.keyPath.length <= 1) {\r\n            return;\r\n        }\r\n        const keyPathOfSelectedItem = this.state.keyPathOfSelectedItem;\r\n        if (this.state.selectedKeys.indexOf(info.key) >= 0) {\r\n            // deselect SubMenu child\r\n            delete keyPathOfSelectedItem[info.key];\r\n        } else {\r\n            // select SubMenu child\r\n            keyPathOfSelectedItem[info.key] = info.keyPath;\r\n        }\r\n        this.setState({ keyPathOfSelectedItem });\r\n    }\r\n\r\n    renderFilterIcon = () => {\r\n        const { column, locale, prefixCls } = this.props;\r\n        const filterIcon = column.filterIcon;\r\n        const dropdownSelectedClass = this.props.selectedKeys.length > 0 ? `${prefixCls}-selected` : '';\r\n\r\n        return filterIcon ? React.cloneElement(filterIcon, {\r\n            title: locale.filterTitle,\r\n            className: classNames(filterIcon.className, {\r\n                [`${prefixCls}-icon`]: true\r\n            }),\r\n        }) : <Icon title={locale.filterTitle} type=\"filter\" className={dropdownSelectedClass} />;\r\n    }\r\n    render() {\r\n        const { column, locale, prefixCls, dropdownPrefixCls, getPopupContainer } = this.props;\r\n        // default multiple selection in filter dropdown\r\n        const multiple = ('filterMultiple' in column) ? column.filterMultiple : true;\r\n        const dropdownMenuClass = classNames({\r\n            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu()\r\n        });\r\n        const menus = column.filterDropdown ? (\r\n            <FilterDropdownMenuWrapper>\r\n                {column.filterDropdown}\r\n            </FilterDropdownMenuWrapper>\r\n        ) : (\r\n            <FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\r\n                <Menu\r\n                    multiple={multiple}\r\n                    onClick={this.handleMenuItemClick}\r\n                    prefixCls={`${dropdownPrefixCls}-menu`}\r\n                    className={dropdownMenuClass}\r\n                    onSelect={this.setSelectedKeys}\r\n                    onDeselect={this.setSelectedKeys}\r\n                    selectedKeys={this.state.selectedKeys}\r\n                    getPopupContainer={(triggerNode) => triggerNode.parentNode}\r\n                >\r\n                    {this.renderMenus(column.filters)}\r\n                </Menu>\r\n                <div className={`${prefixCls}-dropdown-btns`}>\r\n                    <a\r\n                        className={`${prefixCls}-dropdown-link confirm`}\r\n                        onClick={this.handleConfirm}\r\n                    >\r\n                        {locale.filterConfirm}\r\n                    </a>\r\n                    <a\r\n                        className={`${prefixCls}-dropdown-link clear`}\r\n                        onClick={this.handleClearFilters}\r\n                    >\r\n                        {locale.filterReset}\r\n                    </a>\r\n                </div>\r\n            </FilterDropdownMenuWrapper>\r\n        );\r\n\r\n        return (\r\n            <Dropdown\r\n                trigger={['click']}\r\n                overlay={menus}\r\n                visible={this.neverShown ? false : this.state.visible}\r\n                onVisibleChange={this.onVisibleChange}\r\n                getPopupContainer={getPopupContainer}\r\n                forceRender\r\n            >\r\n                {this.renderFilterIcon()}\r\n            </Dropdown>\r\n        );\r\n    }\r\n}\r\n"]}