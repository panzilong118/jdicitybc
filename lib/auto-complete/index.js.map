{"version":3,"sources":["../../components/auto-complete/index.js"],"names":["React","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","getInputElement","children","element","isValidElement","Children","only","elementProps","saveSelect","node","select","focus","blur","size","className","notFoundContent","prefixCls","optionLabelProp","dataSource","cls","options","childArray","toArray","length","map","item","value","text","Error","Component","Option","OptGroup","defaultProps","transitionName","choiceTransitionName","showSearch","filterOption"],"mappings":"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","file":"index.js","sourcesContent":["import * as React from 'react';\nimport { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport Select, { AbstractSelectProps, SelectValue, OptionProps, OptGroupProps } from '../select';\nimport Input from '../input';\nimport InputElement from './InputElement';\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nexport default class AutoComplete extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.select = {};\n  }\n\n  static Option = Option;\n  static OptGroup = OptGroup;\n\n  static defaultProps = {\n    prefixCls: 'jc-select',\n    transitionName: 'slide-up',\n    optionLabelProp: 'children',\n    choiceTransitionName: 'zoom',\n    showSearch: false,\n    filterOption: false,\n  };\n\n  getInputElement = () => {\n    const { children } = this.props;\n    const element = children && React.isValidElement(children) && children.type !== Option ?\n      React.Children.only(this.props.children) : <Input />;\n    const elementProps = { ...element.props };\n    // https://github.com/ant-design/ant-design/pull/7742\n    delete elementProps.children;\n    return (\n      <InputElement {...elementProps}>{element}</InputElement>\n    );\n  }\n\n  focus() {\n    this.select.focus();\n  }\n\n  blur() {\n    this.select.blur();\n  }\n\n  saveSelect = (node) => {\n    this.select = node;\n  }\n\n  render() {\n    let {\n      size, className = '', notFoundContent, prefixCls, optionLabelProp, dataSource, children,\n    } = this.props;\n\n    const cls = classNames({\n      [`${prefixCls}-lg`]: size === 'large',\n      [`${prefixCls}-sm`]: size === 'small',\n      [className]: !!className,\n      [`${prefixCls}-show-search`]: true,\n      [`${prefixCls}-auto-complete`]: true,\n    });\n\n    let options;\n    const childArray = React.Children.toArray(children);\n    if (childArray.length &&\n        isSelectOptionOrSelectOptGroup(childArray[0])\n      ) {\n      options = children;\n    } else {\n      options = dataSource ? dataSource.map((item) => {\n        if (React.isValidElement(item)) {\n          return item;\n        }\n        switch (typeof item) {\n          case 'string':\n            return <Option key={item}>{item}</Option>;\n          case 'object':\n            return (\n              <Option key={item.value}>\n                {item.text}\n              </Option>\n            );\n          default:\n            throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n        }\n      }) : [];\n    }\n\n    return (\n      <Select\n        {...this.props}\n        className={cls}\n        mode=\"combobox\"\n        optionLabelProp={optionLabelProp}\n        getInputElement={this.getInputElement}\n        notFoundContent={notFoundContent}\n        ref={this.saveSelect}\n      >\n        {options}\n      </Select>\n    );\n  }\n}\n"]}