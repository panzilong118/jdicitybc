{"version":3,"sources":["../../components/slider/index.js"],"names":["React","SliderProps","prefixCls","string","tooltipPrefixCls","range","bool","min","number","max","step","oneOfType","oneOf","marks","object","dots","value","arrayOf","defaultValue","included","disabled","vertical","onChange","func","onAfterChange","tipFormatter","className","id","Slider","props","toggleTooltipVisible","index","visible","setState","visibles","handleWithTooltip","dragging","restProps","state","offset","saveSlider","node","rcSlider","undefined","focus","Component","defaultProps","toString","propTypes"],"mappings":"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","file":"index.js","sourcesContent":["import * as React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport RcSlider from 'rc-slider/lib/Slider';\n\nimport RcRange from 'rc-slider/lib/Range';\n\nimport RcHandle from 'rc-slider/lib/Handle';\n\nimport Tooltip from '../tooltip';\n\nexport const SliderProps = {\n    prefixCls: PropTypes.string,\n    tooltipPrefixCls: PropTypes.string,\n    range: PropTypes.bool,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.oneOfType([PropTypes.number,PropTypes.oneOf([null])]),\n    marks: PropTypes.object,\n    dots: PropTypes.bool,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n    defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n    included: PropTypes.bool,\n    disabled: PropTypes.bool,\n    vertical: PropTypes.bool,\n    onChange: PropTypes.func,\n    onAfterChange: PropTypes.func,\n    tipFormatter: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([null])]),\n    className: PropTypes.string,\n    id: PropTypes.string\n};\n\nexport default class Slider extends React.Component {\n    static defaultProps = {\n        prefixCls: 'jc-slider',\n        tooltipPrefixCls: 'jc-tooltip',\n        tipFormatter: (value) => {\n            return value.toString();\n        }\n    };\n    static propTypes = {...SliderProps}\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visibles: {}\n        };\n        this.rcSlider = undefined;\n    }\n\n    toggleTooltipVisible = (index, visible) => {\n        this.setState(({ visibles }) => ({\n            visibles: {\n                ...visibles,\n                [index]: visible\n            }\n        }));\n    }\n    handleWithTooltip = ({ value, dragging, index, ...restProps }) => {\n        const { tooltipPrefixCls, tipFormatter } = this.props;\n        const { visibles } = this.state;\n        const visible = tipFormatter ? (visibles[index] || dragging) : false;\n        return (\n            <Tooltip\n                prefixCls={tooltipPrefixCls}\n                title={tipFormatter ? tipFormatter(value) : ''}\n                visible={visible}\n                placement='top'\n                transitionName='zoom-down'\n                key={index}\n                align={{\n                    offset: [0, 0] // 解决tooltip不随slider滚动问题\n                }}\n            >\n                <RcHandle\n                    {...restProps}\n                    value={value}\n                    onMouseEnter={() => this.toggleTooltipVisible(index, true)}\n                    onMouseLeave={() => this.toggleTooltipVisible(index, false)}\n                />\n            </Tooltip>\n        );\n    }\n\n    focus() {\n        this.rcSlider.focus();\n    }\n\n    blur() {\n        this.rcSlider.focus();\n    }\n\n    saveSlider = (node) => {\n        this.rcSlider = node;\n    }\n\n    render() {\n        const { range, ...restProps } = this.props;\n        if (range) {\n            return <RcRange {...restProps} ref={this.saveSlider} handle={this.handleWithTooltip} />;\n        }\n        return <RcSlider {...restProps} ref={this.saveSlider} handle={this.handleWithTooltip} />;\n    }\n}\n"]}