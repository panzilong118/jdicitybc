{"version":3,"sources":["../../components/badge/ScrollNumber.js"],"names":["getNumberArray","num","toString","split","reverse","map","Number","i","ScrollNumber","props","renderNumberList","position","childrenToReturn","currentClassName","push","state","animateStarted","count","nextProps","lastCount","setState","setTimeout","onAnimated","currentDigit","lastDigit","getPositionByNum","removeTransition","undefined","className","prefixCls","style","transition","msTransform","WebkitTransform","transform","key","isNaN","renderCurrentNumber","title","component","restProps","newProps","borderColor","boxShadow","renderNumberElement","defaultProps"],"mappings":";;;;;;;;;;;AACA;;;;AAIA;;;;AAEA;;;;;;;;;;;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6B;AACzB,WAAOA,MACHA,IAAIC,QAAJ,GACKC,KADL,CACW,EADX,EAEKC,OAFL,GAGKC,GAHL,CAGS;AAAA,eAAKC,OAAOC,CAAP,CAAL;AAAA,KAHT,CADG,GAIwB,EAJ/B;AAKH;;IAGoBC,Y;;;AAanB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACTA,KADS;;AAAA,cA0DnBC,gBA1DmB,GA0DA,UAACC,QAAD,EAAc;AAC7B,gBAAMC,mBAAmB,EAAzB;AACA,iBAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,KAAK,CAA7B,EAAgC;AAC5B,oBAAMM,mBAAoBF,aAAaJ,CAAd,GAAmB,SAAnB,GAA+B,EAAxD;AACAK,iCAAiBE,IAAjB,CAAsB;AAAA;AAAA,sBAAG,KAAKP,EAAEL,QAAF,EAAR,EAAsB,WAAWW,gBAAjC;AAAoDN,wBAAI;AAAxD,iBAAtB;AACH;AACD,mBAAOK,gBAAP;AACH,SAjEkB;;AAEf,cAAKG,KAAL,GAAa;AACTC,4BAAgB,IADP;AAETC,mBAAOR,MAAMQ;AAFJ,SAAb;AAFe;AAMlB;;;;kDAGyBC,S,EAAW;AAAA;;AACjC,gBAAI,WAAWA,SAAf,EAA0B;AACtB,oBAAI,KAAKH,KAAL,CAAWE,KAAX,KAAqBC,UAAUD,KAAnC,EAA0C;AACtC;AACH;AACD,qBAAKE,SAAL,GAAiB,KAAKJ,KAAL,CAAWE,KAA5B;AACA;AACA,qBAAKG,QAAL,CAAc;AACVJ,oCAAgB;AADN,iBAAd,EAEG,YAAM;AACL;AACA;AACAK,+BAAW,YAAM;AACb,+BAAKD,QAAL,CAAc;AACVJ,4CAAgB,KADN;AAEVC,mCAAOC,UAAUD;AAFP,yBAAd,EAGG,YAAM;AAAA,gCACGK,UADH,GACkB,OAAKb,KADvB,CACGa,UADH;;AAEL,gCAAIA,UAAJ,EAAgB;AACZA;AACH;AACJ,yBARD;AASH,qBAVD,EAUG,CAVH;AAWH,iBAhBD;AAiBH;AACJ;;;yCAEgBrB,G,EAAKM,C,EAAG;AACrB,gBAAI,KAAKQ,KAAL,CAAWC,cAAf,EAA+B;AAC3B,uBAAO,KAAKf,GAAZ;AACH;AACD,gBAAMsB,eAAevB,eAAe,KAAKe,KAAL,CAAWE,KAA1B,EAAiCV,CAAjC,CAArB;AACA,gBAAMiB,YAAYxB,eAAe,KAAKmB,SAApB,EAA+BZ,CAA/B,CAAlB;AACA;AACA,gBAAI,KAAKQ,KAAL,CAAWE,KAAX,GAAmB,KAAKE,SAA5B,EAAuC;AACnC,oBAAII,gBAAgBC,SAApB,EAA+B;AAC3B,2BAAO,KAAKvB,GAAZ;AACH;AACD,uBAAO,KAAKA,GAAZ;AACH;AACD,gBAAIsB,gBAAgBC,SAApB,EAA+B;AAC3B,uBAAO,KAAKvB,GAAZ;AACH;AACD,mBAAOA,GAAP;AACH;;;4CAcmBA,G,EAAKM,C,EAAG;AACxB,gBAAMI,WAAW,KAAKc,gBAAL,CAAsBxB,GAAtB,EAA2BM,CAA3B,CAAjB;AACA,gBAAMmB,mBAAmB,KAAKX,KAAL,CAAWC,cAAX,IACxBhB,eAAe,KAAKmB,SAApB,EAA+BZ,CAA/B,MAAsCoB,SADvC;AAEA,mBAAO,0BAAc,MAAd,EAAsB;AACzBC,2BAAc,KAAKnB,KAAL,CAAWoB,SAAzB,UADyB;AAEzBC,uBAAO;AACHC,gCAAYL,oBAAoB,MAD7B;AAEHM,iDAA2B,CAACrB,QAAD,GAAY,GAAvC,OAFG;AAGHsB,qDAA+B,CAACtB,QAAD,GAAY,GAA3C,OAHG;AAIHuB,+CAAyB,CAACvB,QAAD,GAAY,GAArC;AAJG,iBAFkB;AAQzBwB,qBAAK5B;AARoB,aAAtB,EASJ,KAAKG,gBAAL,CAAsBC,QAAtB,CATI,CAAP;AAUH;;;8CAEqB;AAAA;;AAAA,gBACVI,KADU,GACA,IADA,CACVA,KADU;;AAElB,gBAAI,CAACA,MAAME,KAAP,IAAgBX,OAAO8B,KAAP,CAAa9B,OAAOS,MAAME,KAAb,CAAb,CAApB,EAAuD;AACnD;AACA;AACA,uBAAOF,MAAME,KAAb;AACH;AACD,mBAAOjB,eAAee,MAAME,KAArB,EACFZ,GADE,CACE,UAACJ,GAAD,EAAMM,CAAN;AAAA,uBAAY,OAAK8B,mBAAL,CAAyBpC,GAAzB,EAA8BM,CAA9B,CAAZ;AAAA,aADF,EACgDH,OADhD,EAAP;AAEH;;;iCAEQ;AAAA,yBAC0C,KAAKK,KAD/C;AAAA,gBACGoB,SADH,UACGA,SADH;AAAA,gBACcD,SADd,UACcA,SADd;AAAA,gBACyBE,KADzB,UACyBA,KADzB;AAAA,gBACgCQ,KADhC,UACgCA,KADhC;;AAEL,gBAAMC,YAAY,KAAK9B,KAAL,CAAW8B,SAAX,IAAwB,KAA1C;AACA;AACA,gBAAMC,YAAY,oBAAK,KAAK/B,KAAV,EAAiB,CAC/B,OAD+B,EAE/B,YAF+B,EAG/B,WAH+B,EAI/B,WAJ+B,CAAjB,CAAlB;AAMA,gBAAMgC,wBACCD,SADD;AAEFZ,2BAAW,0BAAWC,SAAX,EAAsBD,SAAtB,CAFT;AAGFU;AAHE,cAAN;AAKA;AACA;AACA;AACA,gBAAIR,SAASA,MAAMY,WAAnB,EAAgC;AAC5BD,yBAASX,KAAT,CAAea,SAAf,kBAAwCb,MAAMY,WAA9C;AACH;AACD,mBAAO,0BACHH,SADG,EAEHE,QAFG,EAGH,KAAKG,mBAAL,EAHG,CAAP;AAKH;;;;;;AArIkBpC,Y,CACZqC,Y,GAAe;AAClBhB,eAAW,kBADO;AAElBZ,WAAO,IAFW;AAGlBsB,eAAW,EAHO;AAIlBX,eAAW,EAJO;AAKlBE,WAAO,EALW;AAMlBQ,WAAO,IANW;AAOlBhB,cAPkB,wBAOL,CACZ;AARiB,C;kBADHd,Y","file":"ScrollNumber.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport { createElement, Component } from 'react';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport omit from 'omit.js';\r\n\r\nfunction getNumberArray(num) {\r\n    return num ?\r\n        num.toString()\r\n            .split('')\r\n            .reverse()\r\n            .map(i => Number(i)) : [];\r\n}\r\n\r\n\r\nexport default class ScrollNumber extends Component {\r\n  static defaultProps = {\r\n      prefixCls: 'jc-scroll-number',\r\n      count: null,\r\n      component: '',\r\n      className: '',\r\n      style: {},\r\n      title: null,\r\n      onAnimated() {\r\n      },\r\n  };\r\n\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          animateStarted: true,\r\n          count: props.count,\r\n      };\r\n  }\r\n\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n      if ('count' in nextProps) {\r\n          if (this.state.count === nextProps.count) {\r\n              return;\r\n          }\r\n          this.lastCount = this.state.count;\r\n          // 复原数字初始位置\r\n          this.setState({\r\n              animateStarted: true,\r\n          }, () => {\r\n              // 等待数字位置复原完毕\r\n              // 开始设置完整的数字\r\n              setTimeout(() => {\r\n                  this.setState({\r\n                      animateStarted: false,\r\n                      count: nextProps.count,\r\n                  }, () => {\r\n                      const { onAnimated } = this.props;\r\n                      if (onAnimated) {\r\n                          onAnimated();\r\n                      }\r\n                  });\r\n              }, 5);\r\n          });\r\n      }\r\n  }\r\n\r\n  getPositionByNum(num, i) {\r\n      if (this.state.animateStarted) {\r\n          return 10 + num;\r\n      }\r\n      const currentDigit = getNumberArray(this.state.count)[i];\r\n      const lastDigit = getNumberArray(this.lastCount)[i];\r\n      // 同方向则在同一侧切换数字\r\n      if (this.state.count > this.lastCount) {\r\n          if (currentDigit >= lastDigit) {\r\n              return 10 + num;\r\n          }\r\n          return 20 + num;\r\n      }\r\n      if (currentDigit <= lastDigit) {\r\n          return 10 + num;\r\n      }\r\n      return num;\r\n  }\r\n\r\n  lastCount;\r\n\r\n\r\n  renderNumberList = (position) => {\r\n      const childrenToReturn = [];\r\n      for (let i = 0; i < 30; i += 1) {\r\n          const currentClassName = (position === i) ? 'current' : '';\r\n          childrenToReturn.push(<p key={i.toString()} className={currentClassName}>{i % 10}</p>);\r\n      }\r\n      return childrenToReturn;\r\n  }\r\n\r\n  renderCurrentNumber(num, i) {\r\n      const position = this.getPositionByNum(num, i);\r\n      const removeTransition = this.state.animateStarted ||\r\n      (getNumberArray(this.lastCount)[i] === undefined);\r\n      return createElement('span', {\r\n          className: `${this.props.prefixCls}-only`,\r\n          style: {\r\n              transition: removeTransition && 'none',\r\n              msTransform: `translateY(${-position * 100}%)`,\r\n              WebkitTransform: `translateY(${-position * 100}%)`,\r\n              transform: `translateY(${-position * 100}%)`,\r\n          },\r\n          key: i,\r\n      }, this.renderNumberList(position));\r\n  }\r\n\r\n  renderNumberElement() {\r\n      const { state } = this;\r\n      if (!state.count || Number.isNaN(Number(state.count))) {\r\n          // 原条件为 (!state.count || isNaN(state.count))\r\n          // isNaN未通过ESLint校验，未找到替代，不影响逻辑暂时去掉 \r\n          return state.count;\r\n      }\r\n      return getNumberArray(state.count)\r\n          .map((num, i) => this.renderCurrentNumber(num, i)).reverse();\r\n  }\r\n\r\n  render() {\r\n      const { prefixCls, className, style, title } = this.props;\r\n      const component = this.props.component || 'sup';\r\n      // fix https://fb.me/react-unknown-prop\r\n      const restProps = omit(this.props, [\r\n          'count',\r\n          'onAnimated',\r\n          'component',\r\n          'prefixCls',\r\n      ]);\r\n      const newProps = {\r\n          ...restProps,\r\n          className: classNames(prefixCls, className),\r\n          title,\r\n      };\r\n      // allow specify the border\r\n      // mock border-color by box-shadow for compatible with old usage:\r\n      // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />\r\n      if (style && style.borderColor) {\r\n          newProps.style.boxShadow = `0 0 0 1px ${style.borderColor} inset`;\r\n      }\r\n      return createElement(\r\n          component,\r\n          newProps,\r\n          this.renderNumberElement(),\r\n      );\r\n  }\r\n}\r\n"]}