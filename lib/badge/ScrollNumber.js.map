{"version":3,"sources":["../../components/badge/ScrollNumber.js"],"names":["getNumberArray","num","toString","split","reverse","map","Number","i","ScrollNumber","props","renderNumberList","position","childrenToReturn","currentClassName","push","state","animateStarted","count","nextProps","lastCount","setState","setTimeout","onAnimated","currentDigit","lastDigit","getPositionByNum","removeTransition","undefined","className","prefixCls","style","transition","msTransform","WebkitTransform","transform","key","isNaN","renderCurrentNumber","title","component","restProps","newProps","borderColor","boxShadow","renderNumberElement","defaultProps"],"mappings":"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","file":"ScrollNumber.js","sourcesContent":["\nimport React from 'react';\n\nimport { createElement, Component } from 'react';\n\nimport classNames from 'classnames';\n\nimport omit from 'omit.js';\n\nfunction getNumberArray(num) {\n    return num ?\n        num.toString()\n            .split('')\n            .reverse()\n            .map(i => Number(i)) : [];\n}\n\n\nexport default class ScrollNumber extends Component {\n  static defaultProps = {\n      prefixCls: 'jc-scroll-number',\n      count: null,\n      component: '',\n      className: '',\n      style: {},\n      title: null,\n      onAnimated() {\n      },\n  };\n\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          animateStarted: true,\n          count: props.count,\n      };\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n      if ('count' in nextProps) {\n          if (this.state.count === nextProps.count) {\n              return;\n          }\n          this.lastCount = this.state.count;\n          // 复原数字初始位置\n          this.setState({\n              animateStarted: true,\n          }, () => {\n              // 等待数字位置复原完毕\n              // 开始设置完整的数字\n              setTimeout(() => {\n                  this.setState({\n                      animateStarted: false,\n                      count: nextProps.count,\n                  }, () => {\n                      const { onAnimated } = this.props;\n                      if (onAnimated) {\n                          onAnimated();\n                      }\n                  });\n              }, 5);\n          });\n      }\n  }\n\n  getPositionByNum(num, i) {\n      if (this.state.animateStarted) {\n          return 10 + num;\n      }\n      const currentDigit = getNumberArray(this.state.count)[i];\n      const lastDigit = getNumberArray(this.lastCount)[i];\n      // 同方向则在同一侧切换数字\n      if (this.state.count > this.lastCount) {\n          if (currentDigit >= lastDigit) {\n              return 10 + num;\n          }\n          return 20 + num;\n      }\n      if (currentDigit <= lastDigit) {\n          return 10 + num;\n      }\n      return num;\n  }\n\n  lastCount;\n\n\n  renderNumberList = (position) => {\n      const childrenToReturn = [];\n      for (let i = 0; i < 30; i += 1) {\n          const currentClassName = (position === i) ? 'current' : '';\n          childrenToReturn.push(<p key={i.toString()} className={currentClassName}>{i % 10}</p>);\n      }\n      return childrenToReturn;\n  }\n\n  renderCurrentNumber(num, i) {\n      const position = this.getPositionByNum(num, i);\n      const removeTransition = this.state.animateStarted ||\n      (getNumberArray(this.lastCount)[i] === undefined);\n      return createElement('span', {\n          className: `${this.props.prefixCls}-only`,\n          style: {\n              transition: removeTransition && 'none',\n              msTransform: `translateY(${-position * 100}%)`,\n              WebkitTransform: `translateY(${-position * 100}%)`,\n              transform: `translateY(${-position * 100}%)`,\n          },\n          key: i,\n      }, this.renderNumberList(position));\n  }\n\n  renderNumberElement() {\n      const { state } = this;\n      if (!state.count || Number.isNaN(Number(state.count))) {\n          // 原条件为 (!state.count || isNaN(state.count))\n          // isNaN未通过ESLint校验，未找到替代，不影响逻辑暂时去掉 \n          return state.count;\n      }\n      return getNumberArray(state.count)\n          .map((num, i) => this.renderCurrentNumber(num, i)).reverse();\n  }\n\n  render() {\n      const { prefixCls, className, style, title } = this.props;\n      const component = this.props.component || 'sup';\n      // fix https://fb.me/react-unknown-prop\n      const restProps = omit(this.props, [\n          'count',\n          'onAnimated',\n          'component',\n          'prefixCls',\n      ]);\n      const newProps = {\n          ...restProps,\n          className: classNames(prefixCls, className),\n          title,\n      };\n      // allow specify the border\n      // mock border-color by box-shadow for compatible with old usage:\n      // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />\n      if (style && style.borderColor) {\n          newProps.style.boxShadow = `0 0 0 1px ${style.borderColor} inset`;\n      }\n      return createElement(\n          component,\n          newProps,\n          this.renderNumberElement(),\n      );\n  }\n}\n"]}