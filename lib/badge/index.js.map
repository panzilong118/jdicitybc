{"version":3,"sources":["../../components/badge/index.js"],"names":["statusArray","Badge","props","state","count","showZero","prefixCls","scrollNumberPrefixCls","overflowCount","className","style","children","dot","status","text","offset","restProps","displayCount","isZero","isDot","isEmpty","undefined","hidden","statusCls","scrollNumberCls","toString","length","badgeCls","styleWithOffset","marginTop","marginLeft","scrollNumber","statusText","Component","defaultProps","propTypes","oneOfType","string","number","bool","oneOf","array","object"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport Animate from 'rc-animate';\r\n\r\nimport ScrollNumber from './ScrollNumber';\r\n\r\nconst statusArray = ['success', 'processing', 'default', 'error', 'warning'];\r\n\r\nexport default class Badge extends React.Component {\r\n     // 默认props\r\n     static defaultProps = {\r\n         prefixCls: 'jc-badge', // class前缀\r\n         scrollNumberPrefixCls: 'jc-scroll-number',\r\n         count: null,\r\n         showZero: false,\r\n         dot: false,\r\n         overflowCount: 99,\r\n         className: '',\r\n         style: {},\r\n         status: undefined,\r\n         text: undefined,\r\n         offset: [],\r\n     };\r\n    // props 类型\r\n    static propTypes = {\r\n        count: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number,\r\n        ]),\r\n        showZero: PropTypes.bool,\r\n        dot: PropTypes.bool,\r\n        overflowCount: PropTypes.number,\r\n        status: PropTypes.oneOf(statusArray),\r\n        text: PropTypes.string,\r\n        offset: PropTypes.array,\r\n        className: PropTypes.string,\r\n        style: PropTypes.object,\r\n        prefixCls: PropTypes.string,\r\n        scrollNumberPrefixCls: PropTypes.string,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            count,\r\n            showZero,\r\n            prefixCls,\r\n            scrollNumberPrefixCls,\r\n            overflowCount,\r\n            className,\r\n            style,\r\n            children,\r\n            dot,\r\n            status,\r\n            text,\r\n            offset,\r\n            ...restProps\r\n        } = this.props;\r\n\r\n        let displayCount = (count) > (overflowCount) ? `${overflowCount}+` : count;\r\n        const isZero = displayCount === '0' || displayCount === 0;\r\n        const isDot = (dot && !isZero) || status;\r\n\r\n        // dot mode don't need count\r\n        if (isDot) {\r\n            displayCount = '';\r\n        }\r\n\r\n        const isEmpty = displayCount === null || displayCount === undefined || displayCount === '';\r\n        const hidden = (isEmpty || (isZero && !showZero)) && !isDot;\r\n\r\n        const statusCls = classNames({\r\n            [`${prefixCls}-status-dot`]: !!status,\r\n            [`${prefixCls}-status-${status}`]: !!status,\r\n        });\r\n        const scrollNumberCls = classNames({\r\n            [`${prefixCls}-dot`]: isDot,\r\n            [`${prefixCls}-count`]: !isDot,\r\n            [`${prefixCls}-multiple-words`]: !isDot && count && count.toString && count.toString().length > 1,\r\n            [`${prefixCls}-status-${status}`]: !!status,\r\n        });\r\n        const badgeCls = classNames(className, prefixCls, {\r\n            [`${prefixCls}-status`]: !!status,\r\n            [`${prefixCls}-not-a-wrapper`]: !children,\r\n        });\r\n        const styleWithOffset = offset ? {\r\n            marginTop: offset[0],\r\n            marginLeft: offset[1],\r\n            ...style,\r\n        } : style;\r\n        // <Badge status=\"success\" />\r\n        if (!children && status) {\r\n            return (\r\n                <span className={badgeCls} style={styleWithOffset}>\r\n                    <span className={statusCls} />\r\n                    <span className={`${prefixCls}-status-text`}>{text}</span>\r\n                </span>\r\n            );\r\n        }\r\n    \r\n        const scrollNumber = hidden ? null : (\r\n            <ScrollNumber\r\n                prefixCls={scrollNumberPrefixCls}\r\n                data-show={!hidden}\r\n                className={scrollNumberCls}\r\n                count={displayCount}\r\n                title={count}\r\n                style={styleWithOffset}\r\n            />\r\n        );\r\n    \r\n        const statusText = (hidden || !text) ? null : (\r\n            <span className={`${prefixCls}-status-text`}>{text}</span>\r\n        );\r\n    \r\n        return (\r\n            <span {...restProps} className={badgeCls}>\r\n                {children}\r\n                <Animate\r\n                    component=''\r\n                    showProp='data-show'\r\n                    transitionName={children ? `${prefixCls}-zoom` : ''}\r\n                    transitionAppear\r\n                >\r\n                    {scrollNumber}\r\n                </Animate>\r\n                {statusText}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n"]}