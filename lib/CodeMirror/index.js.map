{"version":3,"sources":["../../components/CodeMirror/index.js"],"names":["require","CodeMirror","setCursor","editor","toEnd","doc","getCursor","line","ch","cursor","paste","props","onChange","options","value","onScroll","ref","changeDelay","e","getValue","on","focus","replaceSelection","setOption","setValue","fixBottom","readOnly","useFocus","getScrollInfo","height","scrollTo","className","self","React","Component","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * beautify|format code style\n *\n * usage:\n *  <CodeMirror\n *    fixBottom\n *    className=\"text-list\"\n *    value={cmdLogs.join('\\n')}\n *    ref={el => autoScrollTo(el, true)}\n *    options={{\n *      ...CODE_MIRROR_OPTION.beautify,\n *      mode: 'shell'\n *    }}\n *  />\n */\nimport React from 'react';\nimport codemirror from 'codemirror';\nimport { debounce } from 'lodash';\nimport './style/index.less';\n\nrequire('codemirror/mode/sql/sql');\nrequire('codemirror/mode/shell/shell');\nrequire('codemirror/addon/display/placeholder');\n\nexport default class CodeMirror extends React.Component {\n  static defaultProps = {\n    useFocus: true\n  }\n\n  componentDidMount() {\n    this.paste = '';\n    const {\n      onChange, options, value = '', onScroll\n    } = this.props;\n\n    this.editor = codemirror(this.ref, { ...options, value });\n    const { editor, setCursor } = this;\n\n    setCursor(editor, true);\n    const changeDelay = debounce((e) => {\n      setCursor(e);\n      onChange && onChange(e.getValue());\n    }, 300);\n    editor.on('change', changeDelay);\n    editor.on('blur', (e) => {\n      setCursor(e);\n    });\n    onScroll && editor.on('scroll', onScroll);\n  }\n\n  shouldComponentUpdate({ paste = '', value = '', }) {\n    // const { readOnly } = options;\n    const { editor } = this;\n    // const { useFocus } = this.props;\n\n    // const focus = () => {\n    //   if (readOnly) return;\n    //   if (!useFocus) return;\n    //   editor.focus();\n    //   editor.setCursor({ ...this.cursor }, readOnly);\n    // };\n\n    if (paste !== this.paste) {\n      this.focus();\n      editor.replaceSelection(` ${paste}`);\n      this.paste = paste;\n    } else if (value !== editor.getValue()) {\n      editor.setOption('value', value);\n\n      editor.setValue(value);\n      this.fixBottom();\n      this.focus();\n    }\n    return false;\n  }\n\n  setCursor = (editor, toEnd) => {\n    const { line, ch } = editor.doc.getCursor();\n    this.cursor = { ch, line: toEnd ? line + 1 : line };\n  }\n\n  focus() {\n    const { editor } = this;\n    const { options: { readOnly }, useFocus } = this.props;\n    if (readOnly) return;\n    if (!useFocus) return;\n    editor.focus();\n    editor.setCursor({ ...this.cursor }, readOnly);\n  }\n\n  fixBottom() {\n    const { fixBottom } = this.props;\n    if (!fixBottom) return;\n\n    const { editor } = this;\n    const { height } = editor.getScrollInfo();\n    editor.scrollTo(0, height);\n  }\n\n  render() {\n    const { className, options: { readOnly } } = this.props;\n    return (\n      <div\n        className={`${className} ${readOnly && 'readOnly'}`}\n        ref={(self) => { this.ref = self; }}\n      />\n    );\n  }\n}\n"]}