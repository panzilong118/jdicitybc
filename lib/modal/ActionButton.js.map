{"version":3,"sources":["../../components/modal/ActionButton.js"],"names":["React","ReactDOM","ActionButton","props","onClick","actionFn","closeModal","ret","length","then","setState","loading","state","autoFocus","$this","findDOMNode","timeoutId","setTimeout","focus","clearTimeout","type","children","Component"],"mappings":";;;;;;;;;AAAA;;IAAYA,K;;AACZ;;IAAYC,Q;;AACZ;;;;;;;;;;;;;;IAEqBC,Y;;;AACjB;;AAEA,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACTA,KADS;;AAAA,cAiBnBC,OAjBmB,GAiBT,YAAM;AAAA,8BACqB,MAAKD,KAD1B;AAAA,gBACJE,QADI,eACJA,QADI;AAAA,gBACMC,UADN,eACMA,UADN;;AAEZ,gBAAID,QAAJ,EAAc;AACV,oBAAIE,YAAJ;AACA,oBAAIF,SAASG,MAAb,EAAqB;AACjBD,0BAAMF,SAASC,UAAT,CAAN;AACH,iBAFD,MAEO;AACHC,0BAAMF,UAAN;AACA,wBAAI,CAACE,GAAL,EAAU;AACND;AACH;AACJ;AACD,oBAAIC,OAAOA,IAAIE,IAAf,EAAqB;AACjB,0BAAKC,QAAL,CAAc,EAAEC,SAAS,IAAX,EAAd;AACAJ,wBAAIE,IAAJ,CAAS,YAAa;AAClB;AACA;AACAH;AACH,qBAJD,EAIG,YAAM;AACL;AACA,8BAAKI,QAAL,CAAc,EAAEC,SAAS,KAAX,EAAd;AACH,qBAPD;AAQH;AACJ,aArBD,MAqBO;AACHL;AACH;AACJ,SA3CkB;;AAEf,cAAKM,KAAL,GAAa;AACTD,qBAAS;AADA,SAAb;AAFe;AAKlB;;;;4CAEmB;AAChB,gBAAI,KAAKR,KAAL,CAAWU,SAAf,EAA0B;AACtB,oBAAMC,QAAQb,SAASc,WAAT,CAAqB,IAArB,CAAd;AACA,qBAAKC,SAAL,GAAiBC,WAAW;AAAA,2BAAMH,MAAMI,KAAN,EAAN;AAAA,iBAAX,CAAjB;AACH;AACJ;;;+CAEsB;AACnBC,yBAAa,KAAKH,SAAlB;AACH;;;iCA8BQ;AAAA,yBACsB,KAAKb,KAD3B;AAAA,gBACGiB,IADH,UACGA,IADH;AAAA,gBACSC,QADT,UACSA,QADT;AAAA,gBAEGV,OAFH,GAEe,KAAKC,KAFpB,CAEGD,OAFH;;AAGL,mBACI;AAAA;AAAA,kBAAQ,MAAMS,IAAd,EAAoB,SAAS,KAAKhB,OAAlC,EAA2C,SAASO,OAApD;AACKU;AADL,aADJ;AAKH;;;;EAzDqCrB,MAAMsB,S;;kBAA3BpB,Y","file":"ActionButton.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport Button from '../button';\r\n\r\nexport default class ActionButton extends React.Component {\r\n    // timeoutId: number;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.autoFocus) {\r\n            const $this = ReactDOM.findDOMNode(this);\r\n            this.timeoutId = setTimeout(() => $this.focus());\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutId);\r\n    }\r\n    onClick = () => {\r\n        const { actionFn, closeModal } = this.props;\r\n        if (actionFn) {\r\n            let ret;\r\n            if (actionFn.length) {\r\n                ret = actionFn(closeModal);\r\n            } else {\r\n                ret = actionFn();\r\n                if (!ret) {\r\n                    closeModal();\r\n                }\r\n            }\r\n            if (ret && ret.then) {\r\n                this.setState({ loading: true });\r\n                ret.then((...args) => {\r\n                    // It's unnecessary to set loading=false, for the Modal will be unmounted after close.\r\n                    // this.setState({ loading: false });\r\n                    closeModal(...args);\r\n                }, () => {\r\n                    // See: https://github.com/jc-design/jc-design/issues/6183\r\n                    this.setState({ loading: false });\r\n                });\r\n            }\r\n        } else {\r\n            closeModal();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { type, children } = this.props;\r\n        const { loading } = this.state;\r\n        return (\r\n            <Button type={type} onClick={this.onClick} loading={loading}>\r\n                {children}\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n"]}