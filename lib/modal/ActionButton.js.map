{"version":3,"sources":["../../components/modal/ActionButton.js"],"names":["React","ReactDOM","ActionButton","props","onClick","actionFn","closeModal","ret","length","then","setState","loading","state","autoFocus","$this","findDOMNode","timeoutId","setTimeout","focus","clearTimeout","type","children","Component"],"mappings":";;;;;;;;;AAAA;;IAAYA,K;;AACZ;;IAAYC,Q;;AACZ;;;;;;;;;;;;;;IAEqBC,Y;;;AACjB;;AAEA,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACTA,KADS;;AAAA,cAiBnBC,OAjBmB,GAiBT,YAAM;AAAA,8BACqB,MAAKD,KAD1B;AAAA,gBACJE,QADI,eACJA,QADI;AAAA,gBACMC,UADN,eACMA,UADN;;AAEZ,gBAAID,QAAJ,EAAc;AACV,oBAAIE,YAAJ;AACA,oBAAIF,SAASG,MAAb,EAAqB;AACjBD,0BAAMF,SAASC,UAAT,CAAN;AACH,iBAFD,MAEO;AACHC,0BAAMF,UAAN;AACA,wBAAI,CAACE,GAAL,EAAU;AACND;AACH;AACJ;AACD,oBAAIC,OAAOA,IAAIE,IAAf,EAAqB;AACjB,0BAAKC,QAAL,CAAc,EAAEC,SAAS,IAAX,EAAd;AACAJ,wBAAIE,IAAJ,CAAS,YAAa;AAClB;AACA;AACAH;AACH,qBAJD,EAIG,YAAM;AACL;AACA,8BAAKI,QAAL,CAAc,EAAEC,SAAS,KAAX,EAAd;AACH,qBAPD;AAQH;AACJ,aArBD,MAqBO;AACHL;AACH;AACJ,SA3CkB;;AAEf,cAAKM,KAAL,GAAa;AACTD,qBAAS;AADA,SAAb;AAFe;AAKlB;;;;4CAEmB;AAChB,gBAAI,KAAKR,KAAL,CAAWU,SAAf,EAA0B;AACtB,oBAAMC,QAAQb,SAASc,WAAT,CAAqB,IAArB,CAAd;AACA,qBAAKC,SAAL,GAAiBC,WAAW;AAAA,2BAAMH,MAAMI,KAAN,EAAN;AAAA,iBAAX,CAAjB;AACH;AACJ;;;+CAEsB;AACnBC,yBAAa,KAAKH,SAAlB;AACH;;;iCA8BQ;AAAA,yBACsB,KAAKb,KAD3B;AAAA,gBACGiB,IADH,UACGA,IADH;AAAA,gBACSC,QADT,UACSA,QADT;AAAA,gBAEGV,OAFH,GAEe,KAAKC,KAFpB,CAEGD,OAFH;;AAGL,mBACI;AAAA;AAAA,kBAAQ,MAAMS,IAAd,EAAoB,SAAS,KAAKhB,OAAlC,EAA2C,SAASO,OAApD;AACKU;AADL,aADJ;AAKH;;;;EAzDqCrB,MAAMsB,S;;kBAA3BpB,Y","file":"ActionButton.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Button from '../button';\n\nexport default class ActionButton extends React.Component {\n    // timeoutId: number;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.autoFocus) {\n            const $this = ReactDOM.findDOMNode(this);\n            this.timeoutId = setTimeout(() => $this.focus());\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeoutId);\n    }\n    onClick = () => {\n        const { actionFn, closeModal } = this.props;\n        if (actionFn) {\n            let ret;\n            if (actionFn.length) {\n                ret = actionFn(closeModal);\n            } else {\n                ret = actionFn();\n                if (!ret) {\n                    closeModal();\n                }\n            }\n            if (ret && ret.then) {\n                this.setState({ loading: true });\n                ret.then((...args) => {\n                    // It's unnecessary to set loading=false, for the Modal will be unmounted after close.\n                    // this.setState({ loading: false });\n                    closeModal(...args);\n                }, () => {\n                    // See: https://github.com/jc-design/jc-design/issues/6183\n                    this.setState({ loading: false });\n                });\n            }\n        } else {\n            closeModal();\n        }\n    }\n\n\n    render() {\n        const { type, children } = this.props;\n        const { loading } = this.state;\n        return (\n            <Button type={type} onClick={this.onClick} loading={loading}>\n                {children}\n            </Button>\n        );\n    }\n}\n"]}